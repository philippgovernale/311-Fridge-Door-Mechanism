
Fridge Door Mechanism.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000f24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187a  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  000029de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fba  00000000  00000000  000035fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  000045b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000847  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099d  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_6>
  1c:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 05 	call	0xab0	; 0xab0 <main>
  88:	0c 94 56 07 	jmp	0xeac	; 0xeac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <get_door_state_uncalib>:
uint16_t closing_door_open_current = 0;

uint16_t opening_door_closed_current = 0;
uint16_t opening_door_open_current = 0;

enum door_state get_door_state_uncalib(enum door_state state, enum door_state intended_state){
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c8 2f       	mov	r28, r24
  9a:	d6 2f       	mov	r29, r22
	/*Always measure with door closed when calibrating as when the fridge is first started, this may be safely assumed*/
	
	uint16_t ADC_count_4_ms;
	if (state == UNKNOWN){
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	31 f4       	brne	.+12     	; 0xac <get_door_state_uncalib+0x1c>
		ADC_count_4_ms = measure_current_rise(DOOR_CLOSED, DOOR_CLOSED);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
  a8:	8c 01       	movw	r16, r24
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <get_door_state_uncalib+0x22>
	}
	
	else {
		ADC_count_4_ms = measure_current_rise(state , intended_state);
  ac:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
  b0:	8c 01       	movw	r16, r24
	}
	
	/*if below average, most likely closing*/
	if (intended_state == DOOR_CLOSED && ADC_count_4_ms < AVERAGE_OPENING_50_DC_4_MS){
  b2:	d1 30       	cpi	r29, 0x01	; 1
  b4:	09 f0       	breq	.+2      	; 0xb8 <get_door_state_uncalib+0x28>
  b6:	55 c0       	rjmp	.+170    	; 0x162 <get_door_state_uncalib+0xd2>
  b8:	04 3f       	cpi	r16, 0xF4	; 244
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	18 07       	cpc	r17, r24
  be:	58 f5       	brcc	.+86     	; 0x116 <get_door_state_uncalib+0x86>
		/*15% variation allowed*/
		if (((abs(ADC_count_4_ms - MIN_CLOSING_50_DC_4_MS)*100) / ADC_count_4_ms) < 15){
  c0:	84 e6       	ldi	r24, 0x64	; 100
  c2:	80 9f       	mul	r24, r16
  c4:	90 01       	movw	r18, r0
  c6:	81 9f       	mul	r24, r17
  c8:	30 0d       	add	r19, r0
  ca:	11 24       	eor	r1, r1
  cc:	20 55       	subi	r18, 0x50	; 80
  ce:	33 4c       	sbci	r19, 0xC3	; 195
  d0:	c9 01       	movw	r24, r18
  d2:	99 23       	and	r25, r25
  d4:	24 f4       	brge	.+8      	; 0xde <get_door_state_uncalib+0x4e>
  d6:	88 27       	eor	r24, r24
  d8:	99 27       	eor	r25, r25
  da:	82 1b       	sub	r24, r18
  dc:	93 0b       	sbc	r25, r19
  de:	b8 01       	movw	r22, r16
  e0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
  e4:	6f 30       	cpi	r22, 0x0F	; 15
  e6:	71 05       	cpc	r23, r1
  e8:	30 f4       	brcc	.+12     	; 0xf6 <get_door_state_uncalib+0x66>
			closing_door_closed_current = ADC_count_4_ms;
  ea:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <closing_door_closed_current+0x1>
  ee:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <closing_door_closed_current>
			return DOOR_CLOSED;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	ad c0       	rjmp	.+346    	; 0x250 <get_door_state_uncalib+0x1c0>
		}
		
		else {
			/*Door is likely to be slightly open*/
			switch(1, DOOR_CLOSED);
			timer_wait(15);
  f6:	6f e0       	ldi	r22, 0x0F	; 15
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
			switch(0, DOOR_CLOSED);
			
			uint16_t repeat_ADC_count = measure_current_rise(DOOR_CLOSED, DOOR_CLOSED);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
			
			if (((repeat_ADC_count - ADC_count_4_ms) < 0) && (((repeat_ADC_count - ADC_count_4_ms)*100)/repeat_ADC_count > 2)) {
				get_door_state_uncalib(state, intended_state);
			} 
			else{
				closing_door_closed_current = ADC_count_4_ms;
 10a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <closing_door_closed_current+0x1>
 10e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <closing_door_closed_current>
				return DOOR_CLOSED;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	9d c0       	rjmp	.+314    	; 0x250 <get_door_state_uncalib+0x1c0>
			}
		}
	}
	else if (intended_state == DOOR_CLOSED && ADC_count_4_ms > AVERAGE_CLOSING_50_DC_4_MS){
 116:	05 3f       	cpi	r16, 0xF5	; 245
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	18 07       	cpc	r17, r24
 11c:	08 f4       	brcc	.+2      	; 0x120 <get_door_state_uncalib+0x90>
 11e:	8f c0       	rjmp	.+286    	; 0x23e <get_door_state_uncalib+0x1ae>
		/*15% variation allowed*/
		if (((abs(ADC_count_4_ms - MAX_CLOSING_50_DC_4_MS)*100)/ADC_count_4_ms) < 15){
 120:	84 e6       	ldi	r24, 0x64	; 100
 122:	80 9f       	mul	r24, r16
 124:	90 01       	movw	r18, r0
 126:	81 9f       	mul	r24, r17
 128:	30 0d       	add	r19, r0
 12a:	11 24       	eor	r1, r1
 12c:	20 55       	subi	r18, 0x50	; 80
 12e:	33 4c       	sbci	r19, 0xC3	; 195
 130:	c9 01       	movw	r24, r18
 132:	99 23       	and	r25, r25
 134:	24 f4       	brge	.+8      	; 0x13e <get_door_state_uncalib+0xae>
 136:	88 27       	eor	r24, r24
 138:	99 27       	eor	r25, r25
 13a:	82 1b       	sub	r24, r18
 13c:	93 0b       	sbc	r25, r19
 13e:	b8 01       	movw	r22, r16
 140:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 144:	6f 30       	cpi	r22, 0x0F	; 15
 146:	71 05       	cpc	r23, r1
 148:	30 f4       	brcc	.+12     	; 0x156 <get_door_state_uncalib+0xc6>
			closing_door_open_current = ADC_count_4_ms;
 14a:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <closing_door_open_current+0x1>
 14e:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <closing_door_open_current>
			return DOOR_OPEN;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	7d c0       	rjmp	.+250    	; 0x250 <get_door_state_uncalib+0x1c0>
		}
		else if ((ADC_count_4_ms - MAX_CLOSING_50_DC_4_MS) > 0){
			closing_door_open_current = ADC_count_4_ms;
 156:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <closing_door_open_current+0x1>
 15a:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <closing_door_open_current>
			return DOOR_OPEN;
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	77 c0       	rjmp	.+238    	; 0x250 <get_door_state_uncalib+0x1c0>
			else {
				return DOOR_OPEN;
			}
		}
	}
	else if (intended_state == DOOR_OPEN && ADC_count_4_ms > AVERAGE_OPENING_50_DC_4_MS){
 162:	d1 11       	cpse	r29, r1
 164:	6e c0       	rjmp	.+220    	; 0x242 <get_door_state_uncalib+0x1b2>
 166:	05 3f       	cpi	r16, 0xF5	; 245
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	18 07       	cpc	r17, r24
 16c:	08 f1       	brcs	.+66     	; 0x1b0 <get_door_state_uncalib+0x120>
		if (((abs(ADC_count_4_ms - MAX_OPENING_50_DC_4_MS)*100)/ADC_count_4_ms) < 15){
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	80 9f       	mul	r24, r16
 172:	90 01       	movw	r18, r0
 174:	81 9f       	mul	r24, r17
 176:	30 0d       	add	r19, r0
 178:	11 24       	eor	r1, r1
 17a:	20 55       	subi	r18, 0x50	; 80
 17c:	33 4c       	sbci	r19, 0xC3	; 195
 17e:	c9 01       	movw	r24, r18
 180:	99 23       	and	r25, r25
 182:	24 f4       	brge	.+8      	; 0x18c <get_door_state_uncalib+0xfc>
 184:	88 27       	eor	r24, r24
 186:	99 27       	eor	r25, r25
 188:	82 1b       	sub	r24, r18
 18a:	93 0b       	sbc	r25, r19
 18c:	b8 01       	movw	r22, r16
 18e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 192:	6f 30       	cpi	r22, 0x0F	; 15
 194:	71 05       	cpc	r23, r1
 196:	30 f4       	brcc	.+12     	; 0x1a4 <get_door_state_uncalib+0x114>
			opening_door_open_current = ADC_count_4_ms;
 198:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <_edata+0x1>
 19c:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			return DOOR_OPEN;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	56 c0       	rjmp	.+172    	; 0x250 <get_door_state_uncalib+0x1c0>
		}
		else if ((ADC_count_4_ms - MAX_OPENING_50_DC_4_MS) > 0){
			opening_door_open_current = ADC_count_4_ms;
 1a4:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <_edata+0x1>
 1a8:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			return DOOR_OPEN;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	50 c0       	rjmp	.+160    	; 0x250 <get_door_state_uncalib+0x1c0>
			else {
				return DOOR_CLOSED;
			}		
		}
	}
	else if (intended_state == DOOR_OPEN && ADC_count_4_ms < AVERAGE_OPENING_50_DC_4_MS){
 1b0:	04 3f       	cpi	r16, 0xF4	; 244
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	18 07       	cpc	r17, r24
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <get_door_state_uncalib+0x12a>
 1b8:	46 c0       	rjmp	.+140    	; 0x246 <get_door_state_uncalib+0x1b6>
		if ((abs(ADC_count_4_ms - MIN_OPENING_50_DC_4_MS)*100 / ADC_count_4_ms) < 15){
 1ba:	84 e6       	ldi	r24, 0x64	; 100
 1bc:	80 9f       	mul	r24, r16
 1be:	90 01       	movw	r18, r0
 1c0:	81 9f       	mul	r24, r17
 1c2:	30 0d       	add	r19, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	20 55       	subi	r18, 0x50	; 80
 1c8:	33 4c       	sbci	r19, 0xC3	; 195
 1ca:	c9 01       	movw	r24, r18
 1cc:	99 23       	and	r25, r25
 1ce:	24 f4       	brge	.+8      	; 0x1d8 <get_door_state_uncalib+0x148>
 1d0:	88 27       	eor	r24, r24
 1d2:	99 27       	eor	r25, r25
 1d4:	82 1b       	sub	r24, r18
 1d6:	93 0b       	sbc	r25, r19
 1d8:	b8 01       	movw	r22, r16
 1da:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 1de:	6f 30       	cpi	r22, 0x0F	; 15
 1e0:	71 05       	cpc	r23, r1
 1e2:	30 f4       	brcc	.+12     	; 0x1f0 <get_door_state_uncalib+0x160>
			opening_door_closed_current = ADC_count_4_ms;
 1e4:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <opening_door_closed_current+0x1>
 1e8:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <opening_door_closed_current>
			return DOOR_CLOSED;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	30 c0       	rjmp	.+96     	; 0x250 <get_door_state_uncalib+0x1c0>
			opening_door_closed_current = ADC_count_4_ms;
			return DOOR_CLOSED;
		}
		else {
			switch(1, DOOR_OPEN);
			timer_wait(15);
 1f0:	6f e0       	ldi	r22, 0x0F	; 15
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
			switch(0, DOOR_OPEN);
			
			uint16_t repeat_ADC_count = measure_current_rise(DOOR_OPEN, DOOR_OPEN);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
 204:	9c 01       	movw	r18, r24
			
			if ((repeat_ADC_count - ADC_count_4_ms) > 0 && ((((repeat_ADC_count) - ADC_count_4_ms)*100)/repeat_ADC_count) / repeat_ADC_count > 2){
 206:	08 17       	cp	r16, r24
 208:	19 07       	cpc	r17, r25
 20a:	f9 f0       	breq	.+62     	; 0x24a <get_door_state_uncalib+0x1ba>
 20c:	ac 01       	movw	r20, r24
 20e:	40 1b       	sub	r20, r16
 210:	51 0b       	sbc	r21, r17
 212:	64 e6       	ldi	r22, 0x64	; 100
 214:	64 9f       	mul	r22, r20
 216:	c0 01       	movw	r24, r0
 218:	65 9f       	mul	r22, r21
 21a:	90 0d       	add	r25, r0
 21c:	11 24       	eor	r1, r1
 21e:	b9 01       	movw	r22, r18
 220:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 224:	cb 01       	movw	r24, r22
 226:	b9 01       	movw	r22, r18
 228:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 22c:	63 30       	cpi	r22, 0x03	; 3
 22e:	71 05       	cpc	r23, r1
 230:	70 f0       	brcs	.+28     	; 0x24e <get_door_state_uncalib+0x1be>
				get_door_state_uncalib(state, intended_state);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
				return DOOR_CLOSED;
			}			
		}
	}
	/*In case nothing matches (very unlikely) assume state has not changed*/
	return state;
 23a:	8c 2f       	mov	r24, r28
			switch(0, DOOR_OPEN);
			
			uint16_t repeat_ADC_count = measure_current_rise(DOOR_OPEN, DOOR_OPEN);
			
			if ((repeat_ADC_count - ADC_count_4_ms) > 0 && ((((repeat_ADC_count) - ADC_count_4_ms)*100)/repeat_ADC_count) / repeat_ADC_count > 2){
				get_door_state_uncalib(state, intended_state);
 23c:	09 c0       	rjmp	.+18     	; 0x250 <get_door_state_uncalib+0x1c0>
				return DOOR_CLOSED;
			}			
		}
	}
	/*In case nothing matches (very unlikely) assume state has not changed*/
	return state;
 23e:	8c 2f       	mov	r24, r28
 240:	07 c0       	rjmp	.+14     	; 0x250 <get_door_state_uncalib+0x1c0>
 242:	8c 2f       	mov	r24, r28
 244:	05 c0       	rjmp	.+10     	; 0x250 <get_door_state_uncalib+0x1c0>
 246:	8c 2f       	mov	r24, r28
 248:	03 c0       	rjmp	.+6      	; 0x250 <get_door_state_uncalib+0x1c0>
			
			if ((repeat_ADC_count - ADC_count_4_ms) > 0 && ((((repeat_ADC_count) - ADC_count_4_ms)*100)/repeat_ADC_count) / repeat_ADC_count > 2){
				get_door_state_uncalib(state, intended_state);
			}
			else {
				return DOOR_CLOSED;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	01 c0       	rjmp	.+2      	; 0x250 <get_door_state_uncalib+0x1c0>
 24e:	81 e0       	ldi	r24, 0x01	; 1
			}			
		}
	}
	/*In case nothing matches (very unlikely) assume state has not changed*/
	return state;
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <get_door_state>:

	  /*door closed should always be at least 40% higher than door open. Maximum divergences in door door closed are ~31%
	  !!!! These numbers, I believe are not for 10% */
  enum door_state get_door_state(enum door_state state, enum door_state intended_state){
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	c8 2f       	mov	r28, r24
 26c:	d6 2f       	mov	r29, r22
	  
	  if (!closing_door_closed_current || !closing_door_open_current || !opening_door_closed_current || !opening_door_open_current){
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <closing_door_closed_current>
 272:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <closing_door_closed_current+0x1>
 276:	89 2b       	or	r24, r25
 278:	91 f0       	breq	.+36     	; 0x29e <get_door_state+0x44>
 27a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <closing_door_open_current>
 27e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <closing_door_open_current+0x1>
 282:	89 2b       	or	r24, r25
 284:	61 f0       	breq	.+24     	; 0x29e <get_door_state+0x44>
 286:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <opening_door_closed_current>
 28a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <opening_door_closed_current+0x1>
 28e:	89 2b       	or	r24, r25
 290:	31 f0       	breq	.+12     	; 0x29e <get_door_state+0x44>
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 296:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 29a:	89 2b       	or	r24, r25
 29c:	21 f4       	brne	.+8      	; 0x2a6 <get_door_state+0x4c>
		  get_door_state_uncalib(state, intended_state);
 29e:	6d 2f       	mov	r22, r29
 2a0:	8c 2f       	mov	r24, r28
 2a2:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
	  }

	  uint16_t i_ADC = measure_current_rise(state, intended_state);
 2a6:	6d 2f       	mov	r22, r29
 2a8:	8c 2f       	mov	r24, r28
 2aa:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
 2ae:	8c 01       	movw	r16, r24

	  uint16_t door_open, door_closed;
	  
	  if (intended_state == DOOR_CLOSED){
 2b0:	d1 30       	cpi	r29, 0x01	; 1
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <get_door_state+0x5c>
 2b4:	52 c0       	rjmp	.+164    	; 0x35a <get_door_state+0x100>
		  door_open = abs(i_ADC-closing_door_closed_current)*100 / i_ADC;
 2b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <closing_door_closed_current>
 2ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <closing_door_closed_current+0x1>
 2be:	98 01       	movw	r18, r16
 2c0:	28 1b       	sub	r18, r24
 2c2:	39 0b       	sbc	r19, r25
 2c4:	c9 01       	movw	r24, r18
 2c6:	22 f4       	brpl	.+8      	; 0x2d0 <get_door_state+0x76>
 2c8:	22 27       	eor	r18, r18
 2ca:	33 27       	eor	r19, r19
 2cc:	28 1b       	sub	r18, r24
 2ce:	39 0b       	sbc	r19, r25
 2d0:	44 e6       	ldi	r20, 0x64	; 100
 2d2:	42 9f       	mul	r20, r18
 2d4:	c0 01       	movw	r24, r0
 2d6:	43 9f       	mul	r20, r19
 2d8:	90 0d       	add	r25, r0
 2da:	11 24       	eor	r1, r1
 2dc:	b8 01       	movw	r22, r16
 2de:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 2e2:	fb 01       	movw	r30, r22
		  door_closed = abs(i_ADC-closing_door_open_current)*100 / i_ADC;
 2e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <closing_door_open_current>
 2e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <closing_door_open_current+0x1>
 2ec:	98 01       	movw	r18, r16
 2ee:	28 1b       	sub	r18, r24
 2f0:	39 0b       	sbc	r19, r25
 2f2:	c9 01       	movw	r24, r18
 2f4:	22 f4       	brpl	.+8      	; 0x2fe <get_door_state+0xa4>
 2f6:	22 27       	eor	r18, r18
 2f8:	33 27       	eor	r19, r19
 2fa:	28 1b       	sub	r18, r24
 2fc:	39 0b       	sbc	r19, r25
 2fe:	44 e6       	ldi	r20, 0x64	; 100
 300:	42 9f       	mul	r20, r18
 302:	c0 01       	movw	r24, r0
 304:	43 9f       	mul	r20, r19
 306:	90 0d       	add	r25, r0
 308:	11 24       	eor	r1, r1
 30a:	b8 01       	movw	r22, r16
 30c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
		  
		  if (door_closed < 31 && door_open > 40){
 310:	6f 31       	cpi	r22, 0x1F	; 31
 312:	71 05       	cpc	r23, r1
 314:	48 f4       	brcc	.+18     	; 0x328 <get_door_state+0xce>
 316:	e9 32       	cpi	r30, 0x29	; 41
 318:	f1 05       	cpc	r31, r1
 31a:	30 f0       	brcs	.+12     	; 0x328 <get_door_state+0xce>
			  closing_door_closed_current = i_ADC;
 31c:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <closing_door_closed_current+0x1>
 320:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <closing_door_closed_current>
			  return DOOR_CLOSED;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	8a c0       	rjmp	.+276    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  }
		  else if (door_open < 15 & door_closed > 40){
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	3f 97       	sbiw	r30, 0x0f	; 15
 32c:	08 f0       	brcs	.+2      	; 0x330 <get_door_state+0xd6>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	88 23       	and	r24, r24
 332:	69 f0       	breq	.+26     	; 0x34e <get_door_state+0xf4>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	69 32       	cpi	r22, 0x29	; 41
 338:	71 05       	cpc	r23, r1
 33a:	08 f4       	brcc	.+2      	; 0x33e <get_door_state+0xe4>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	88 23       	and	r24, r24
 340:	31 f0       	breq	.+12     	; 0x34e <get_door_state+0xf4>
			  closing_door_open_current = i_ADC;
 342:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <closing_door_open_current+0x1>
 346:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <closing_door_open_current>
			  return DOOR_OPEN;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	77 c0       	rjmp	.+238    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  }
		  else{
			  get_door_state_uncalib(state, intended_state);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
		  else{
			  get_door_state_uncalib(state, intended_state);
		  }	  
	  }
	  
	  return state;
 356:	8c 2f       	mov	r24, r28
 358:	71 c0       	rjmp	.+226    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  }
		  else{
			  get_door_state_uncalib(state, intended_state);
		  }	  
	  }
	  else if (intended_state == DOOR_OPEN){
 35a:	d1 11       	cpse	r29, r1
 35c:	6e c0       	rjmp	.+220    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		  door_open = abs(i_ADC-opening_door_open_current)*100 / i_ADC;
 35e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 362:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 366:	98 01       	movw	r18, r16
 368:	28 1b       	sub	r18, r24
 36a:	39 0b       	sbc	r19, r25
 36c:	c9 01       	movw	r24, r18
 36e:	22 f4       	brpl	.+8      	; 0x378 <get_door_state+0x11e>
 370:	22 27       	eor	r18, r18
 372:	33 27       	eor	r19, r19
 374:	28 1b       	sub	r18, r24
 376:	39 0b       	sbc	r19, r25
 378:	44 e6       	ldi	r20, 0x64	; 100
 37a:	42 9f       	mul	r20, r18
 37c:	c0 01       	movw	r24, r0
 37e:	43 9f       	mul	r20, r19
 380:	90 0d       	add	r25, r0
 382:	11 24       	eor	r1, r1
 384:	b8 01       	movw	r22, r16
 386:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 38a:	6b 01       	movw	r12, r22
		  door_closed = abs(i_ADC-opening_door_closed_current)*100 / i_ADC;
 38c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <opening_door_closed_current>
 390:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <opening_door_closed_current+0x1>
 394:	98 01       	movw	r18, r16
 396:	28 1b       	sub	r18, r24
 398:	39 0b       	sbc	r19, r25
 39a:	c9 01       	movw	r24, r18
 39c:	22 f4       	brpl	.+8      	; 0x3a6 <get_door_state+0x14c>
 39e:	22 27       	eor	r18, r18
 3a0:	33 27       	eor	r19, r19
 3a2:	28 1b       	sub	r18, r24
 3a4:	39 0b       	sbc	r19, r25
 3a6:	44 e6       	ldi	r20, 0x64	; 100
 3a8:	42 9f       	mul	r20, r18
 3aa:	c0 01       	movw	r24, r0
 3ac:	43 9f       	mul	r20, r19
 3ae:	90 0d       	add	r25, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	b8 01       	movw	r22, r16
 3b4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 3b8:	7b 01       	movw	r14, r22
		  
		  if (door_closed < 31 && door_open > 0.40){
 3ba:	6f 31       	cpi	r22, 0x1F	; 31
 3bc:	71 05       	cpc	r23, r1
 3be:	98 f4       	brcc	.+38     	; 0x3e6 <get_door_state+0x18c>
 3c0:	b6 01       	movw	r22, r12
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
 3ca:	2d ec       	ldi	r18, 0xCD	; 205
 3cc:	3c ec       	ldi	r19, 0xCC	; 204
 3ce:	4c ec       	ldi	r20, 0xCC	; 204
 3d0:	5e e3       	ldi	r21, 0x3E	; 62
 3d2:	0e 94 bc 06 	call	0xd78	; 0xd78 <__gesf2>
 3d6:	18 16       	cp	r1, r24
 3d8:	34 f4       	brge	.+12     	; 0x3e6 <get_door_state+0x18c>
			  opening_door_closed_current = i_ADC;
 3da:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <opening_door_closed_current+0x1>
 3de:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <opening_door_closed_current>
			  return DOOR_CLOSED;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	2b c0       	rjmp	.+86     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  }
		  else if (door_open < 0.15 & door_closed > 0.40){
 3e6:	b6 01       	movw	r22, r12
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
 3f0:	2a e9       	ldi	r18, 0x9A	; 154
 3f2:	39 e9       	ldi	r19, 0x99	; 153
 3f4:	49 e1       	ldi	r20, 0x19	; 25
 3f6:	5e e3       	ldi	r21, 0x3E	; 62
 3f8:	0e 94 d6 05 	call	0xbac	; 0xbac <__cmpsf2>
 3fc:	88 23       	and	r24, r24
 3fe:	bc f4       	brge	.+46     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 400:	b7 01       	movw	r22, r14
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
 40a:	d1 e0       	ldi	r29, 0x01	; 1
 40c:	2d ec       	ldi	r18, 0xCD	; 205
 40e:	3c ec       	ldi	r19, 0xCC	; 204
 410:	4c ec       	ldi	r20, 0xCC	; 204
 412:	5e e3       	ldi	r21, 0x3E	; 62
 414:	0e 94 bc 06 	call	0xd78	; 0xd78 <__gesf2>
 418:	18 16       	cp	r1, r24
 41a:	0c f0       	brlt	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	d0 e0       	ldi	r29, 0x00	; 0
 41e:	dd 23       	and	r29, r29
 420:	31 f0       	breq	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			  opening_door_open_current = i_ADC;
 422:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <_edata+0x1>
 426:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			  return DOOR_OPEN;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	07 c0       	rjmp	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  }
		  else{
			  get_door_state_uncalib(state, intended_state);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	8c 2f       	mov	r24, r28
 432:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
		  }	  
	  }
	  
	  return state;
 436:	8c 2f       	mov	r24, r28
 438:	01 c0       	rjmp	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	8c 2f       	mov	r24, r28
  }
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	08 95       	ret

0000044e <door_closing>:

  uint8_t door_closing(uint16_t i_ADC_v){
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
	  uint16_t i_ADC_comp = measure_current_rise(DOOR_OPEN, DOOR_OPEN);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
 45c:	bc 01       	movw	r22, r24
	  
	  /*if the decrease in current is by more than 5%, then door is likely to be closing*/
	  if (i_ADC_comp < i_ADC_v && (abs(i_ADC_comp - i_ADC_v)*100/i_ADC_comp) > 5){
 45e:	8c 17       	cp	r24, r28
 460:	9d 07       	cpc	r25, r29
 462:	b0 f4       	brcc	.+44     	; 0x490 <door_closing+0x42>
		  return 1; /*door is likely to be more closed*/
 464:	8c 1b       	sub	r24, r28
 466:	9d 0b       	sbc	r25, r29
 468:	9c 01       	movw	r18, r24
 46a:	22 f4       	brpl	.+8      	; 0x474 <door_closing+0x26>
 46c:	22 27       	eor	r18, r18
 46e:	33 27       	eor	r19, r19
 470:	28 1b       	sub	r18, r24
 472:	39 0b       	sbc	r19, r25
 474:	44 e6       	ldi	r20, 0x64	; 100
 476:	42 9f       	mul	r20, r18
 478:	c0 01       	movw	r24, r0
 47a:	43 9f       	mul	r20, r19
 47c:	90 0d       	add	r25, r0
 47e:	11 24       	eor	r1, r1
 480:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	66 30       	cpi	r22, 0x06	; 6
 488:	71 05       	cpc	r23, r1
 48a:	18 f4       	brcc	.+6      	; 0x492 <door_closing+0x44>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	01 c0       	rjmp	.+2      	; 0x492 <door_closing+0x44>
	  }
	  else {
		  return 0;
 490:	80 e0       	ldi	r24, 0x00	; 0
	  }
  }
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <measure_current_rise>:

uint16_t measure_current_rise(enum door_state state, enum door_state intended_state){
	
	/*only start applying voltage for measuring tc when the ADC value is at 99% of steady state from max current at 20degrees (ie current is very low (2.4 A)*/
	/*should add a buffer for noise. Also amplifying */
	while(get_ADC_count() > 5){
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <measure_current_rise+0xe>
		timer_wait(1);
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>

uint16_t measure_current_rise(enum door_state state, enum door_state intended_state){
	
	/*only start applying voltage for measuring tc when the ADC value is at 99% of steady state from max current at 20degrees (ie current is very low (2.4 A)*/
	/*should add a buffer for noise. Also amplifying */
	while(get_ADC_count() > 5){
 4a6:	0e 94 b0 03 	call	0x760	; 0x760 <get_ADC_count>
 4aa:	06 97       	sbiw	r24, 0x06	; 6
 4ac:	b0 f7       	brcc	.-20     	; 0x49a <measure_current_rise+0x2>
		timer_wait(1);
	}
	
	switch(1, intended_state);
	timer_wait(4); // apply 4 ms pulse
 4ae:	64 e0       	ldi	r22, 0x04	; 4
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
	uint16_t ADC_4_ms = get_ADC_count();
 4ba:	0e 94 b0 03 	call	0x760	; 0x760 <get_ADC_count>
	switch(0, intended_state);
	
	return ADC_4_ms;
}
 4be:	08 95       	ret

000004c0 <voltage_PWM>:
#include "../drivers/timer.h"
#include "../drivers/io_pins.h"

#define FREQ 20

void voltage_PWM(uint8_t frequency, float duty_cycle, enum door_state direction, uint8_t ncycles){
 4c0:	4f 92       	push	r4
 4c2:	5f 92       	push	r5
 4c4:	6f 92       	push	r6
 4c6:	7f 92       	push	r7
 4c8:	8f 92       	push	r8
 4ca:	9f 92       	push	r9
 4cc:	af 92       	push	r10
 4ce:	bf 92       	push	r11
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	6a 01       	movw	r12, r20
 4e0:	7b 01       	movw	r14, r22
 4e2:	d2 2f       	mov	r29, r18

	//full cycle period in ms
	uint8_t period_ms = 1000 / frequency;

	uint8_t on_time = (uint8_t) (duty_cycle * (float)period_ms);
 4e4:	68 2f       	mov	r22, r24
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	88 ee       	ldi	r24, 0xE8	; 232
 4ea:	93 e0       	ldi	r25, 0x03	; 3
 4ec:	0e 94 42 07 	call	0xe84	; 0xe84 <__divmodhi4>
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
 4fa:	2b 01       	movw	r4, r22
 4fc:	3c 01       	movw	r6, r24
 4fe:	a7 01       	movw	r20, r14
 500:	96 01       	movw	r18, r12
 502:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 506:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fixunssfsi>
 50a:	86 2e       	mov	r8, r22
	uint8_t off_time = (uint8_t) ((1 - duty_cycle) * (float)period_ms);
 50c:	a7 01       	movw	r20, r14
 50e:	96 01       	movw	r18, r12
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	9f e3       	ldi	r25, 0x3F	; 63
 518:	0e 94 69 05 	call	0xad2	; 0xad2 <__subsf3>
 51c:	a3 01       	movw	r20, r6
 51e:	92 01       	movw	r18, r4
 520:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 524:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fixunssfsi>

	for (uint8_t i=0; i < ncycles; i++){
 528:	00 23       	and	r16, r16
 52a:	d9 f0       	breq	.+54     	; 0x562 <voltage_PWM+0xa2>
 52c:	c0 e0       	ldi	r28, 0x00	; 0
		switches(1, direction);
		timer_wait(on_time);
 52e:	91 2c       	mov	r9, r1
 530:	a1 2c       	mov	r10, r1
 532:	b1 2c       	mov	r11, r1
		switches(0, direction);
		timer_wait(off_time);
 534:	c6 2e       	mov	r12, r22
 536:	d1 2c       	mov	r13, r1
 538:	e1 2c       	mov	r14, r1
 53a:	f1 2c       	mov	r15, r1

	uint8_t on_time = (uint8_t) (duty_cycle * (float)period_ms);
	uint8_t off_time = (uint8_t) ((1 - duty_cycle) * (float)period_ms);

	for (uint8_t i=0; i < ncycles; i++){
		switches(1, direction);
 53c:	6d 2f       	mov	r22, r29
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 df 03 	call	0x7be	; 0x7be <switches>
		timer_wait(on_time);
 544:	c5 01       	movw	r24, r10
 546:	b4 01       	movw	r22, r8
 548:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
		switches(0, direction);
 54c:	6d 2f       	mov	r22, r29
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 df 03 	call	0x7be	; 0x7be <switches>
		timer_wait(off_time);
 554:	c7 01       	movw	r24, r14
 556:	b6 01       	movw	r22, r12
 558:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
	uint8_t period_ms = 1000 / frequency;

	uint8_t on_time = (uint8_t) (duty_cycle * (float)period_ms);
	uint8_t off_time = (uint8_t) ((1 - duty_cycle) * (float)period_ms);

	for (uint8_t i=0; i < ncycles; i++){
 55c:	cf 5f       	subi	r28, 0xFF	; 255
 55e:	0c 13       	cpse	r16, r28
 560:	ed cf       	rjmp	.-38     	; 0x53c <voltage_PWM+0x7c>
		switches(1, direction);
		timer_wait(on_time);
		switches(0, direction);
		timer_wait(off_time);
	}
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	df 90       	pop	r13
 56e:	cf 90       	pop	r12
 570:	bf 90       	pop	r11
 572:	af 90       	pop	r10
 574:	9f 90       	pop	r9
 576:	8f 90       	pop	r8
 578:	7f 90       	pop	r7
 57a:	6f 90       	pop	r6
 57c:	5f 90       	pop	r5
 57e:	4f 90       	pop	r4
 580:	08 95       	ret

00000582 <closing_force>:

/*for door unattended*/
void closing_force(uint8_t i_ref){
 582:	3f 92       	push	r3
 584:	4f 92       	push	r4
 586:	5f 92       	push	r5
 588:	6f 92       	push	r6
 58a:	7f 92       	push	r7
 58c:	8f 92       	push	r8
 58e:	9f 92       	push	r9
 590:	af 92       	push	r10
 592:	bf 92       	push	r11
 594:	cf 92       	push	r12
 596:	df 92       	push	r13
 598:	ef 92       	push	r14
 59a:	ff 92       	push	r15
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
	float duty_cycle = 0.1;
	uint8_t cycles_per_dc = 1;
	int8_t num_dc = 5;
 5a4:	95 e0       	ldi	r25, 0x05	; 5
}

/*for door unattended*/
void closing_force(uint8_t i_ref){
	float duty_cycle = 0.1;
	uint8_t cycles_per_dc = 1;
 5a6:	99 24       	eor	r9, r9
 5a8:	93 94       	inc	r9
	}
}

/*for door unattended*/
void closing_force(uint8_t i_ref){
	float duty_cycle = 0.1;
 5aa:	0f 2e       	mov	r0, r31
 5ac:	fd ec       	ldi	r31, 0xCD	; 205
 5ae:	bf 2e       	mov	r11, r31
 5b0:	f0 2d       	mov	r31, r0
 5b2:	0f 2e       	mov	r0, r31
 5b4:	fc ec       	ldi	r31, 0xCC	; 204
 5b6:	cf 2e       	mov	r12, r31
 5b8:	f0 2d       	mov	r31, r0
 5ba:	0f 2e       	mov	r0, r31
 5bc:	fc ec       	ldi	r31, 0xCC	; 204
 5be:	df 2e       	mov	r13, r31
 5c0:	f0 2d       	mov	r31, r0
 5c2:	1d e3       	ldi	r17, 0x3D	; 61
		for (uint8_t j=0; j < num_dc; j++){
			voltage_PWM(FREQ, duty_cycle, DOOR_CLOSED, cycles_per_dc);
			duty_cycle += 0.2;
			uint8_t i_current = measure_current_rise(DOOR_OPEN,DOOR_CLOSED);
		
			if (i_ref - i_current > 0 && (((abs(i_ref - i_current)*100) / i_ref) > 2)){
 5c4:	c8 2f       	mov	r28, r24
 5c6:	d0 e0       	ldi	r29, 0x00	; 0
 5c8:	0f 2e       	mov	r0, r31
 5ca:	f4 e6       	ldi	r31, 0x64	; 100
 5cc:	8f 2e       	mov	r8, r31
 5ce:	f0 2d       	mov	r31, r0
				voltage_PWM(FREQ, duty_cycle - 0.2, DOOR_CLOSED, cycles_per_dc);
				return;
			}
		
		}
		duty_cycle = 0.5;
 5d0:	51 2c       	mov	r5, r1
 5d2:	41 2c       	mov	r4, r1
 5d4:	31 2c       	mov	r3, r1
 5d6:	0f 2e       	mov	r0, r31
 5d8:	ff e3       	ldi	r31, 0x3F	; 63
 5da:	7f 2e       	mov	r7, r31
 5dc:	f0 2d       	mov	r31, r0
		num_dc = 3;
 5de:	0f 2e       	mov	r0, r31
 5e0:	f3 e0       	ldi	r31, 0x03	; 3
 5e2:	6f 2e       	mov	r6, r31
 5e4:	f0 2d       	mov	r31, r0
 5e6:	55 c0       	rjmp	.+170    	; 0x692 <closing_force+0x110>
	int8_t num_dc = 5;
	
	for (uint8_t i=0; i < 3; i++){
	
		for (uint8_t j=0; j < num_dc; j++){
			voltage_PWM(FREQ, duty_cycle, DOOR_CLOSED, cycles_per_dc);
 5e8:	09 2d       	mov	r16, r9
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	4b 2d       	mov	r20, r11
 5ee:	5c 2d       	mov	r21, r12
 5f0:	6d 2d       	mov	r22, r13
 5f2:	71 2f       	mov	r23, r17
 5f4:	84 e1       	ldi	r24, 0x14	; 20
 5f6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
			duty_cycle += 0.2;
 5fa:	2d ec       	ldi	r18, 0xCD	; 205
 5fc:	3c ec       	ldi	r19, 0xCC	; 204
 5fe:	4c e4       	ldi	r20, 0x4C	; 76
 600:	5e e3       	ldi	r21, 0x3E	; 62
 602:	6b 2d       	mov	r22, r11
 604:	7c 2d       	mov	r23, r12
 606:	8d 2d       	mov	r24, r13
 608:	91 2f       	mov	r25, r17
 60a:	0e 94 6a 05 	call	0xad4	; 0xad4 <__addsf3>
 60e:	b6 2e       	mov	r11, r22
 610:	c7 2e       	mov	r12, r23
 612:	d8 2e       	mov	r13, r24
 614:	19 2f       	mov	r17, r25
			uint8_t i_current = measure_current_rise(DOOR_OPEN,DOOR_CLOSED);
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
		
			if (i_ref - i_current > 0 && (((abs(i_ref - i_current)*100) / i_ref) > 2)){
 61e:	9e 01       	movw	r18, r28
 620:	28 1b       	sub	r18, r24
 622:	31 09       	sbc	r19, r1
 624:	c9 01       	movw	r24, r18
 626:	18 16       	cp	r1, r24
 628:	19 06       	cpc	r1, r25
 62a:	1c f5       	brge	.+70     	; 0x672 <closing_force+0xf0>
 62c:	33 23       	and	r19, r19
 62e:	24 f4       	brge	.+8      	; 0x638 <closing_force+0xb6>
 630:	22 27       	eor	r18, r18
 632:	33 27       	eor	r19, r19
 634:	28 1b       	sub	r18, r24
 636:	39 0b       	sbc	r19, r25
 638:	82 9e       	mul	r8, r18
 63a:	c0 01       	movw	r24, r0
 63c:	83 9e       	mul	r8, r19
 63e:	90 0d       	add	r25, r0
 640:	11 24       	eor	r1, r1
 642:	be 01       	movw	r22, r28
 644:	0e 94 42 07 	call	0xe84	; 0xe84 <__divmodhi4>
 648:	63 30       	cpi	r22, 0x03	; 3
 64a:	71 05       	cpc	r23, r1
 64c:	94 f0       	brlt	.+36     	; 0x672 <closing_force+0xf0>
				/*door has moved and become more closed*/
			
				/*finish closing it by giving it a PWM just less than the one before*/
				voltage_PWM(FREQ, duty_cycle - 0.2, DOOR_CLOSED, cycles_per_dc);
 64e:	2d ec       	ldi	r18, 0xCD	; 205
 650:	3c ec       	ldi	r19, 0xCC	; 204
 652:	4c e4       	ldi	r20, 0x4C	; 76
 654:	5e e3       	ldi	r21, 0x3E	; 62
 656:	6b 2d       	mov	r22, r11
 658:	7c 2d       	mov	r23, r12
 65a:	8d 2d       	mov	r24, r13
 65c:	91 2f       	mov	r25, r17
 65e:	0e 94 69 05 	call	0xad2	; 0xad2 <__subsf3>
 662:	ab 01       	movw	r20, r22
 664:	bc 01       	movw	r22, r24
 666:	09 2d       	mov	r16, r9
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	84 e1       	ldi	r24, 0x14	; 20
 66c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
				return;
 670:	15 c0       	rjmp	.+42     	; 0x69c <closing_force+0x11a>
	uint8_t cycles_per_dc = 1;
	int8_t num_dc = 5;
	
	for (uint8_t i=0; i < 3; i++){
	
		for (uint8_t j=0; j < num_dc; j++){
 672:	a3 94       	inc	r10
 674:	8a 2d       	mov	r24, r10
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	8e 15       	cp	r24, r14
 67a:	9f 05       	cpc	r25, r15
 67c:	0c f4       	brge	.+2      	; 0x680 <closing_force+0xfe>
 67e:	b4 cf       	rjmp	.-152    	; 0x5e8 <closing_force+0x66>
			}
		
		}
		duty_cycle = 0.5;
		num_dc = 3;
		cycles_per_dc++;
 680:	93 94       	inc	r9
				voltage_PWM(FREQ, duty_cycle - 0.2, DOOR_CLOSED, cycles_per_dc);
				return;
			}
		
		}
		duty_cycle = 0.5;
 682:	b5 2c       	mov	r11, r5
 684:	c4 2c       	mov	r12, r4
 686:	d3 2c       	mov	r13, r3
 688:	17 2d       	mov	r17, r7
		num_dc = 3;
 68a:	96 2d       	mov	r25, r6
void closing_force(uint8_t i_ref){
	float duty_cycle = 0.1;
	uint8_t cycles_per_dc = 1;
	int8_t num_dc = 5;
	
	for (uint8_t i=0; i < 3; i++){
 68c:	34 e0       	ldi	r19, 0x04	; 4
 68e:	93 16       	cp	r9, r19
 690:	29 f0       	breq	.+10     	; 0x69c <closing_force+0x11a>
	
		for (uint8_t j=0; j < num_dc; j++){
 692:	e9 2e       	mov	r14, r25
 694:	99 0f       	add	r25, r25
 696:	ff 08       	sbc	r15, r15
 698:	a1 2c       	mov	r10, r1
 69a:	a6 cf       	rjmp	.-180    	; 0x5e8 <closing_force+0x66>
		duty_cycle = 0.5;
		num_dc = 3;
		cycles_per_dc++;
		
	}
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	df 90       	pop	r13
 6aa:	cf 90       	pop	r12
 6ac:	bf 90       	pop	r11
 6ae:	af 90       	pop	r10
 6b0:	9f 90       	pop	r9
 6b2:	8f 90       	pop	r8
 6b4:	7f 90       	pop	r7
 6b6:	6f 90       	pop	r6
 6b8:	5f 90       	pop	r5
 6ba:	4f 90       	pop	r4
 6bc:	3f 90       	pop	r3
 6be:	08 95       	ret

000006c0 <opening_force>:

void opening_force(){
 6c0:	0f 93       	push	r16
	voltage_PWM(FREQ, 0.1, DOOR_OPEN, 1);
 6c2:	01 e0       	ldi	r16, 0x01	; 1
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	4d ec       	ldi	r20, 0xCD	; 205
 6c8:	5c ec       	ldi	r21, 0xCC	; 204
 6ca:	6c ec       	ldi	r22, 0xCC	; 204
 6cc:	7d e3       	ldi	r23, 0x3D	; 61
 6ce:	84 e1       	ldi	r24, 0x14	; 20
 6d0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	voltage_PWM(FREQ, 0.3, DOOR_OPEN, 1);
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	4a e9       	ldi	r20, 0x9A	; 154
 6d8:	59 e9       	ldi	r21, 0x99	; 153
 6da:	69 e9       	ldi	r22, 0x99	; 153
 6dc:	7e e3       	ldi	r23, 0x3E	; 62
 6de:	84 e1       	ldi	r24, 0x14	; 20
 6e0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	voltage_PWM(FREQ, 0.5, DOOR_OPEN, 1);
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	7f e3       	ldi	r23, 0x3F	; 63
 6ee:	84 e1       	ldi	r24, 0x14	; 20
 6f0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	voltage_PWM(FREQ, 0.7, DOOR_OPEN, 1);
 6f4:	20 e0       	ldi	r18, 0x00	; 0
 6f6:	43 e3       	ldi	r20, 0x33	; 51
 6f8:	53 e3       	ldi	r21, 0x33	; 51
 6fa:	63 e3       	ldi	r22, 0x33	; 51
 6fc:	7f e3       	ldi	r23, 0x3F	; 63
 6fe:	84 e1       	ldi	r24, 0x14	; 20
 700:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	voltage_PWM(FREQ, 0.9, DOOR_OPEN, 1);
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	46 e6       	ldi	r20, 0x66	; 102
 708:	56 e6       	ldi	r21, 0x66	; 102
 70a:	66 e6       	ldi	r22, 0x66	; 102
 70c:	7f e3       	ldi	r23, 0x3F	; 63
 70e:	84 e1       	ldi	r24, 0x14	; 20
 710:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	/*
	Opening sequence: 250 ms
    Could change this if it doesn't work, just a first guess
	*/
}
 714:	0f 91       	pop	r16
 716:	08 95       	ret

00000718 <hp_opening_force>:

/*higher power opening force, if first opening force does not close sufficiently*/
void hp_opening_force(){
 718:	0f 93       	push	r16
	voltage_PWM(FREQ, 0.5, DOOR_OPEN, 2);
 71a:	02 e0       	ldi	r16, 0x02	; 2
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	40 e0       	ldi	r20, 0x00	; 0
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	7f e3       	ldi	r23, 0x3F	; 63
 726:	84 e1       	ldi	r24, 0x14	; 20
 728:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	voltage_PWM(FREQ, 0.7, DOOR_OPEN, 2);
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	43 e3       	ldi	r20, 0x33	; 51
 730:	53 e3       	ldi	r21, 0x33	; 51
 732:	63 e3       	ldi	r22, 0x33	; 51
 734:	7f e3       	ldi	r23, 0x3F	; 63
 736:	84 e1       	ldi	r24, 0x14	; 20
 738:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	voltage_PWM(FREQ, 0.9, DOOR_OPEN, 2);
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	46 e6       	ldi	r20, 0x66	; 102
 740:	56 e6       	ldi	r21, 0x66	; 102
 742:	66 e6       	ldi	r22, 0x66	; 102
 744:	7f e3       	ldi	r23, 0x3F	; 63
 746:	84 e1       	ldi	r24, 0x14	; 20
 748:	0e 94 60 02 	call	0x4c0	; 0x4c0 <voltage_PWM>
	/*
	sequence: 300 ms
	*/
}
 74c:	0f 91       	pop	r16
 74e:	08 95       	ret

00000750 <ADC_init>:
#include "adc.h"

void ADC_init(){

	/* Use Pin C0 as ADC input*/
	DDRC &= ~(1<<0); // Set PC0 to be an input pin
 750:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<0); // Enable the pull-up Resistor for PC0
 752:	40 9a       	sbi	0x08, 0	; 8

	/*Ensure lower 4 bits are disabled to select ADC0 pin*/
	ADMUX &= 0xF0;
 754:	ec e7       	ldi	r30, 0x7C	; 124
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	80 7f       	andi	r24, 0xF0	; 240
 75c:	80 83       	st	Z, r24
 75e:	08 95       	ret

00000760 <get_ADC_count>:
}

uint16_t get_ADC_count (){
	// Use this function when voltage goes to 0.

	ADCSRA |= (1 << ADEN); /*enables ADC*/
 760:	ea e7       	ldi	r30, 0x7A	; 122
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	80 68       	ori	r24, 0x80	; 128
 768:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC); /* start conversion*/
 76a:	80 81       	ld	r24, Z
 76c:	80 64       	ori	r24, 0x40	; 64
 76e:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADIF) ==0){;}; /*wait for the ADC to convert value*/
 770:	80 81       	ld	r24, Z

	uint16_t ADC_value = ADCL | (ADCH<<8); /*ADC value is split in two registers so we combine them together*/
 772:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 776:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	ADCSRA &= ~(1 << ADEN); /*disable ADC when done*/
 77a:	90 81       	ld	r25, Z
 77c:	9f 77       	andi	r25, 0x7F	; 127
 77e:	90 83       	st	Z, r25

	return ADC_value;
 780:	90 e0       	ldi	r25, 0x00	; 0
}
 782:	92 2b       	or	r25, r18
 784:	08 95       	ret

00000786 <current_driver_pins_init>:
#include "io_pins.h"

volatile uint8_t touched = 0;

void current_driver_pins_init(){
	DDRB |= (1 << 0); /*Output pins for current driver. PB0 is opening direction*/
 786:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << 1);
 788:	21 9a       	sbi	0x04, 1	; 4
 78a:	08 95       	ret

0000078c <sensor_pins_init>:
}

void sensor_pins_init(){
	// Set up input pin
	DDRD &= ~(1<<2); // Set pin 2 to be an input pin on D.
 78c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<2); // Enable the pull-up Resistor for PD2
 78e:	5a 9a       	sbi	0x0b, 2	; 11
 790:	08 95       	ret

00000792 <led_pins_init>:
}

void led_pins_init(){
	DDRB |= (1<<3); // led PIN
 792:	23 9a       	sbi	0x04, 3	; 4
 794:	08 95       	ret

00000796 <set_touch_interrupt>:
}

void set_touch_interrupt(){
	//enable interrupt for touch sensor
	EICRA |= (1 << ISC00);
 796:	e9 e6       	ldi	r30, 0x69	; 105
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	81 60       	ori	r24, 0x01	; 1
 79e:	80 83       	st	Z, r24
	EICRA |= (1 << ISC01);
 7a0:	80 81       	ld	r24, Z
 7a2:	82 60       	ori	r24, 0x02	; 2
 7a4:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);
 7a6:	e8 9a       	sbi	0x1d, 0	; 29
 7a8:	08 95       	ret

000007aa <clear_touch_interrupt>:
}

void clear_touch_interrupt(){
	EIMSK &= (1 << INT0);
 7aa:	8d b3       	in	r24, 0x1d	; 29
 7ac:	81 70       	andi	r24, 0x01	; 1
 7ae:	8d bb       	out	0x1d, r24	; 29
 7b0:	08 95       	ret

000007b2 <set_LED>:
}

void set_LED(uint8_t state){
	//** If the state variable is 1 that means door is open, turn on LED **//

	if (state){
 7b2:	88 23       	and	r24, r24
 7b4:	11 f0       	breq	.+4      	; 0x7ba <set_LED+0x8>
		// turn on the LEd
		PORTB |= (1<<PB3); // set led
 7b6:	2b 9a       	sbi	0x05, 3	; 5
 7b8:	08 95       	ret
	}
	else{
		PORTB &= ~(1 << PB3); //clear
 7ba:	2b 98       	cbi	0x05, 3	; 5
 7bc:	08 95       	ret

000007be <switches>:
	}
}

void switches(uint8_t on,enum door_state state){
  if (!on){
 7be:	81 11       	cpse	r24, r1
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <switches+0xa>
    PORTB &= ~(1 << PB1);
 7c2:	29 98       	cbi	0x05, 1	; 5
    PORTB &= ~(1 << PB0);
 7c4:	28 98       	cbi	0x05, 0	; 5
 7c6:	08 95       	ret
  }
  else {
    /* if current state is door open, then apply opening current, as it will not change the state*/
    if (state == DOOR_OPEN){
 7c8:	61 11       	cpse	r22, r1
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <switches+0x12>
      PORTB |= (1 << PB0);
 7cc:	28 9a       	sbi	0x05, 0	; 5
 7ce:	08 95       	ret
    }
    else {
      PORTB |= (1 << PB1);
 7d0:	29 9a       	sbi	0x05, 1	; 5
 7d2:	08 95       	ret

000007d4 <__vector_1>:
    }
  }
}

ISR(INT0_vect){
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	8f 93       	push	r24
	touched = 1;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <touched>
}
 7e6:	8f 91       	pop	r24
 7e8:	0f 90       	pop	r0
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	0f 90       	pop	r0
 7ee:	1f 90       	pop	r1
 7f0:	18 95       	reti

000007f2 <timer_0_PWM_init>:
	TCCR2B &= ~(1 << WGM22);
	
	/*64 prescaler*/
	TCCR2B |= (1 << CS22);
	TCCR2B |= (1 << CS21);
	TCCR2B &= ~(1 << CS20);
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	84 bd       	out	0x24, r24	; 36
 7f6:	83 e0       	ldi	r24, 0x03	; 3
 7f8:	85 bd       	out	0x25, r24	; 37
 7fa:	8a ef       	ldi	r24, 0xFA	; 250
 7fc:	87 bd       	out	0x27, r24	; 39
 7fe:	08 95       	ret

00000800 <timer_2_init>:
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 806:	84 e0       	ldi	r24, 0x04	; 4
 808:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 80c:	8a ef       	ldi	r24, 0xFA	; 250
 80e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 812:	08 95       	ret

00000814 <set_door_unattended_and_led_interrupt>:
 814:	e0 e7       	ldi	r30, 0x70	; 112
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	84 60       	ori	r24, 0x04	; 4
 81c:	80 83       	st	Z, r24
 81e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_count_unattended+0x1>
 822:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer_count_unattended>
 826:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 82a:	08 95       	ret

0000082c <set_door_open_interrupt>:
 82c:	ee e6       	ldi	r30, 0x6E	; 110
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	82 60       	ori	r24, 0x02	; 2
 834:	80 83       	st	Z, r24
 836:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_count_open_PWM>
 83a:	08 95       	ret

0000083c <clear_door_open_interrupt>:
 83c:	ee e6       	ldi	r30, 0x6E	; 110
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	8d 7f       	andi	r24, 0xFD	; 253
 844:	80 83       	st	Z, r24
 846:	08 95       	ret

00000848 <clear_door_unattended_interrupt>:
 848:	e0 e7       	ldi	r30, 0x70	; 112
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	8b 7f       	andi	r24, 0xFB	; 251
 850:	80 83       	st	Z, r24
 852:	08 95       	ret

00000854 <WDT_init>:
}


void WDT_init(){
	/*Need to make sure WDTON fuse is programmed*/
	WDTCSR |= (1 << WDCE| 1 << WDE);
 854:	e0 e6       	ldi	r30, 0x60	; 96
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	88 61       	ori	r24, 0x18	; 24
 85c:	80 83       	st	Z, r24
	
	WDTCSR |= (1 << WDP2) | (1 <<WDP1); //1 s timing
 85e:	80 81       	ld	r24, Z
 860:	86 60       	ori	r24, 0x06	; 6
 862:	80 83       	st	Z, r24
	WDTCSR &= ~(1 << WDE); //interrupt mode
 864:	80 81       	ld	r24, Z
 866:	87 7f       	andi	r24, 0xF7	; 247
 868:	80 83       	st	Z, r24
 86a:	08 95       	ret

0000086c <enable_WDT_interrupt>:
}

void enable_WDT_interrupt(){
	/*Interrupt Enable*/
	WDTCSR |= (1 << WDIE);
 86c:	e0 e6       	ldi	r30, 0x60	; 96
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	80 64       	ori	r24, 0x40	; 64
 874:	80 83       	st	Z, r24
 876:	08 95       	ret

00000878 <disable_WDT_interrupt>:
}

void disable_WDT_interrupt(){
	WDTCSR &= ~(1 << WDIE);
 878:	e0 e6       	ldi	r30, 0x60	; 96
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	8f 7b       	andi	r24, 0xBF	; 191
 880:	80 83       	st	Z, r24
 882:	08 95       	ret

00000884 <timer_wait>:
}

void timer_wait(uint32_t milliseconds){
 884:	ab 01       	movw	r20, r22
 886:	bc 01       	movw	r22, r24
	uint32_t timer_overflows = 0;

	//Reset Count
	TCNT0 = 0;
 888:	16 bc       	out	0x26, r1	; 38
void disable_WDT_interrupt(){
	WDTCSR &= ~(1 << WDIE);
}

void timer_wait(uint32_t milliseconds){
	uint32_t timer_overflows = 0;
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	dc 01       	movw	r26, r24

	//Reset Count
	TCNT0 = 0;

	while(timer_overflows < milliseconds){
 890:	0c c0       	rjmp	.+24     	; 0x8aa <timer_wait+0x26>

		/*check whether Output Compare A match flag is set in Timer interrupt Flag register*/
		if(TIFR0 & (1 << OCF0A)){
 892:	a9 99       	sbic	0x15, 1	; 21
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <timer_wait+0x1e>
	uint32_t timer_overflows = 0;

	//Reset Count
	TCNT0 = 0;

	while(timer_overflows < milliseconds){
 896:	84 17       	cp	r24, r20
 898:	95 07       	cpc	r25, r21
 89a:	a6 07       	cpc	r26, r22
 89c:	b7 07       	cpc	r27, r23
 89e:	c8 f3       	brcs	.-14     	; 0x892 <timer_wait+0xe>
 8a0:	08 95       	ret

		/*check whether Output Compare A match flag is set in Timer interrupt Flag register*/
		if(TIFR0 & (1 << OCF0A)){
			timer_overflows++;
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	a1 1d       	adc	r26, r1
 8a6:	b1 1d       	adc	r27, r1

			//Clear OCF0A in TIFR0 register by writing 1 to it
			TIFR0 |= (1 << OCF0A);
 8a8:	a9 9a       	sbi	0x15, 1	; 21
	uint32_t timer_overflows = 0;

	//Reset Count
	TCNT0 = 0;

	while(timer_overflows < milliseconds){
 8aa:	48 17       	cp	r20, r24
 8ac:	59 07       	cpc	r21, r25
 8ae:	6a 07       	cpc	r22, r26
 8b0:	7b 07       	cpc	r23, r27
 8b2:	19 f0       	breq	.+6      	; 0x8ba <timer_wait+0x36>

		/*check whether Output Compare A match flag is set in Timer interrupt Flag register*/
		if(TIFR0 & (1 << OCF0A)){
 8b4:	a9 9b       	sbis	0x15, 1	; 21
 8b6:	ed cf       	rjmp	.-38     	; 0x892 <timer_wait+0xe>
 8b8:	f4 cf       	rjmp	.-24     	; 0x8a2 <timer_wait+0x1e>
 8ba:	08 95       	ret

000008bc <__vector_6>:
		}
	}
}

/*Watchdog timer (for sending to sleep)*/
ISR(WDT_vect){
 8bc:	1f 92       	push	r1
 8be:	0f 92       	push	r0
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	0f 92       	push	r0
 8c4:	11 24       	eor	r1, r1
	;
}
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <__vector_14>:

/* interrupt to provide 10% duty cycle when door is open*/
ISR(TIMER0_COMPA_vect){
 8d0:	1f 92       	push	r1
 8d2:	0f 92       	push	r0
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	0f 92       	push	r0
 8d8:	11 24       	eor	r1, r1
 8da:	8f 93       	push	r24
	timer_count_open_PWM++;
 8dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_count_open_PWM>
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
 8e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer_count_open_PWM>
	
	if (PWM_state_high && timer_count_open_PWM == DUTY_CYCLE_10_ON_T){
 8e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWM_state_high>
 8ea:	88 23       	and	r24, r24
 8ec:	49 f0       	breq	.+18     	; 0x900 <__stack+0x1>
 8ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_count_open_PWM>
 8f2:	85 30       	cpi	r24, 0x05	; 5
 8f4:	29 f4       	brne	.+10     	; 0x900 <__stack+0x1>
		switch(0, DOOR_OPEN);
		timer_count_open_PWM = 0;
 8f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_count_open_PWM>
		PWM_state_high = 0;
 8fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <PWM_state_high>
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <__stack+0x1b>
	}
	
	else if (!PWM_state_high && timer_count_open_PWM == DUTY_CYCLE_10_OFF_T){
 900:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWM_state_high>
 904:	81 11       	cpse	r24, r1
 906:	09 c0       	rjmp	.+18     	; 0x91a <__stack+0x1b>
 908:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_count_open_PWM>
 90c:	8d 32       	cpi	r24, 0x2D	; 45
 90e:	29 f4       	brne	.+10     	; 0x91a <__stack+0x1b>
		switch(1, DOOR_OPEN);
		timer_count_open_PWM = 0;
 910:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_count_open_PWM>
		PWM_state_high = 1;
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <PWM_state_high>
	}
}
 91a:	8f 91       	pop	r24
 91c:	0f 90       	pop	r0
 91e:	0f be       	out	0x3f, r0	; 63
 920:	0f 90       	pop	r0
 922:	1f 90       	pop	r1
 924:	18 95       	reti

00000926 <__vector_7>:

/*measure time door left open*/
/*flashing LED timer*/
ISR(TIMER2_COMPA_vect){
 926:	1f 92       	push	r1
 928:	0f 92       	push	r0
 92a:	0f b6       	in	r0, 0x3f	; 63
 92c:	0f 92       	push	r0
 92e:	11 24       	eor	r1, r1
 930:	2f 93       	push	r18
 932:	8f 93       	push	r24
 934:	9f 93       	push	r25
	timer_count_unattended++;
 936:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer_count_unattended>
 93a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer_count_unattended+0x1>
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer_count_unattended+0x1>
 944:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer_count_unattended>
	timer_count_led++;
 948:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_count_led>
 94c:	8f 5f       	subi	r24, 0xFF	; 255
 94e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_count_led>

	if (timer_count_unattended == BLINK_LIGHT_TIME){
 952:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer_count_unattended>
 956:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer_count_unattended+0x1>
 95a:	84 3f       	cpi	r24, 0xF4	; 244
 95c:	91 40       	sbci	r25, 0x01	; 1
 95e:	41 f4       	brne	.+16     	; 0x970 <__vector_7+0x4a>
		PORTB ^= (1 << PB4); /*toggle red led*/
 960:	95 b1       	in	r25, 0x05	; 5
 962:	80 e1       	ldi	r24, 0x10	; 16
 964:	89 27       	eor	r24, r25
 966:	85 b9       	out	0x05, r24	; 5
		timer_count_unattended = 0;
 968:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_count_unattended+0x1>
 96c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer_count_unattended>
	}
	
	if (timer_count_led == DOOR_UNATTENDED_TIME){
 970:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_count_led>
		door_unattended = 1;
	}
}
 974:	9f 91       	pop	r25
 976:	8f 91       	pop	r24
 978:	2f 91       	pop	r18
 97a:	0f 90       	pop	r0
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	0f 90       	pop	r0
 980:	1f 90       	pop	r1
 982:	18 95       	reti

00000984 <FSM_tick>:
  START,
  OPENING,
  OPEN,
  CLOSED
};
void FSM_tick(){
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
  static enum state current_state = START;

  switch(current_state){
 988:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_state.1657>
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	a9 f0       	breq	.+42     	; 0x9ba <FSM_tick+0x36>
 990:	30 f0       	brcs	.+12     	; 0x99e <FSM_tick+0x1a>
 992:	82 30       	cpi	r24, 0x02	; 2
 994:	09 f1       	breq	.+66     	; 0x9d8 <FSM_tick+0x54>
 996:	83 30       	cpi	r24, 0x03	; 3
 998:	09 f4       	brne	.+2      	; 0x99c <FSM_tick+0x18>
 99a:	58 c0       	rjmp	.+176    	; 0xa4c <FSM_tick+0xc8>
 99c:	84 c0       	rjmp	.+264    	; 0xaa6 <FSM_tick+0x122>
    case START:
      if (get_door_state(UNKNOWN, UNKNOWN) == DOOR_OPEN){
 99e:	62 e0       	ldi	r22, 0x02	; 2
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	0e 94 2d 01 	call	0x25a	; 0x25a <get_door_state>
 9a6:	81 11       	cpse	r24, r1
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <FSM_tick+0x2e>
        current_state = OPEN;
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
 9b0:	7c c0       	rjmp	.+248    	; 0xaaa <FSM_tick+0x126>
      }
      else {
        current_state = CLOSED;
 9b2:	83 e0       	ldi	r24, 0x03	; 3
 9b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
 9b8:	78 c0       	rjmp	.+240    	; 0xaaa <FSM_tick+0x126>
      }
      break;

    case OPENING:
      opening_force();
 9ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <opening_force>

      if (get_door_state(DOOR_OPEN, DOOR_OPEN) == DOOR_OPEN){
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	0e 94 2d 01 	call	0x25a	; 0x25a <get_door_state>
 9c6:	81 11       	cpse	r24, r1
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <FSM_tick+0x4e>
        current_state = OPEN;
 9ca:	82 e0       	ldi	r24, 0x02	; 2
 9cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
 9d0:	6c c0       	rjmp	.+216    	; 0xaaa <FSM_tick+0x126>
      }
      else {
        /*do alternative attempt to open door*/
		hp_opening_force();
 9d2:	0e 94 8c 03 	call	0x718	; 0x718 <hp_opening_force>
 9d6:	69 c0       	rjmp	.+210    	; 0xaaa <FSM_tick+0x126>
      }

      break;

    case OPEN:
		sei();
 9d8:	78 94       	sei
		set_door_unattended_and_led_interrupt(); /*function should enable timer that starts counting to 30s (via ISR) and then set the state to door closing*/
 9da:	0e 94 0a 04 	call	0x814	; 0x814 <set_door_unattended_and_led_interrupt>

		door_unattended = 0; /*reset flag*/
 9de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <door_unattended>
	  
		uint16_t i_value = measure_current_rise(DOOR_OPEN, DOOR_OPEN);
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	0e 94 4c 02 	call	0x498	; 0x498 <measure_current_rise>
 9ea:	ec 01       	movw	r28, r24

		while (1)
		{
			if (get_door_state(DOOR_OPEN, DOOR_OPEN) == DOOR_CLOSED){
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	0e 94 2d 01 	call	0x25a	; 0x25a <get_door_state>
 9f4:	81 30       	cpi	r24, 0x01	; 1
 9f6:	49 f4       	brne	.+18     	; 0xa0a <FSM_tick+0x86>
			current_state = CLOSED;
 9f8:	83 e0       	ldi	r24, 0x03	; 3
 9fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
			door_unattended = 0;
 9fe:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <door_unattended>
			set_door_open_interrupt();
			timer_wait(50);
			clear_door_open_interrupt();
		
		}
		clear_door_open_interrupt(); 
 a02:	0e 94 1e 04 	call	0x83c	; 0x83c <clear_door_open_interrupt>
		cli();
 a06:	f8 94       	cli
		break;
 a08:	50 c0       	rjmp	.+160    	; 0xaaa <FSM_tick+0x126>
			current_state = CLOSED;
			door_unattended = 0;
			break;
			}
		
			if (door_closing(i_value)){
 a0a:	ce 01       	movw	r24, r28
 a0c:	0e 94 27 02 	call	0x44e	; 0x44e <door_closing>
 a10:	88 23       	and	r24, r24
 a12:	49 f0       	breq	.+18     	; 0xa26 <FSM_tick+0xa2>
			 //breaking force
				switch(1, DOOR_OPEN);
				timer_wait(5); //10%
 a14:	65 e0       	ldi	r22, 0x05	; 5
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
				switch(0, DOOR_OPEN);
				closing_force(); //then finish closing the door
 a20:	0e 94 c1 02 	call	0x582	; 0x582 <closing_force>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <FSM_tick+0xb2>
			}
		
			else if (door_unattended ){
 a26:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <door_unattended>
 a2a:	88 23       	and	r24, r24
 a2c:	21 f0       	breq	.+8      	; 0xa36 <FSM_tick+0xb2>
				closing_force();
 a2e:	0e 94 c1 02 	call	0x582	; 0x582 <closing_force>
				clear_door_unattended_interrupt();
 a32:	0e 94 24 04 	call	0x848	; 0x848 <clear_door_unattended_interrupt>
			
			/*if the door is still closed at this point then don't try to close it anymore as its probably too far away*/
			}
		
		/*Perform 1 10% cycle, to break door if necessary*/
			set_door_open_interrupt();
 a36:	0e 94 16 04 	call	0x82c	; 0x82c <set_door_open_interrupt>
			timer_wait(50);
 a3a:	62 e3       	ldi	r22, 0x32	; 50
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 42 04 	call	0x884	; 0x884 <timer_wait>
			clear_door_open_interrupt();
 a46:	0e 94 1e 04 	call	0x83c	; 0x83c <clear_door_open_interrupt>
		
		}
 a4a:	d0 cf       	rjmp	.-96     	; 0x9ec <FSM_tick+0x68>
		clear_door_open_interrupt(); 
		cli();
		break;

    case CLOSED:
      set_LED(DOOR_CLOSED);
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_LED>
	  set_touch_interrupt();	  
 a52:	0e 94 cb 03 	call	0x796	; 0x796 <set_touch_interrupt>

      while (1)
      {
        if (get_door_state(DOOR_CLOSED, DOOR_CLOSED) == DOOR_OPEN){
 a56:	61 e0       	ldi	r22, 0x01	; 1
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	0e 94 2d 01 	call	0x25a	; 0x25a <get_door_state>
 a5e:	81 11       	cpse	r24, r1
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <FSM_tick+0xe6>
          current_state = OPEN;
 a62:	82 e0       	ldi	r24, 0x02	; 2
 a64:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
          break;
 a68:	19 c0       	rjmp	.+50     	; 0xa9c <FSM_tick+0x118>
        }
		
		if (touched){
 a6a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <touched>
 a6e:	88 23       	and	r24, r24
 a70:	31 f0       	breq	.+12     	; 0xa7e <FSM_tick+0xfa>
			touched = 0;
 a72:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <touched>
			current_state = OPENING;
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
			break;
 a7c:	0f c0       	rjmp	.+30     	; 0xa9c <FSM_tick+0x118>
		}
		
		/*sleep for 1s by going to power down mode*/
		enable_WDT_interrupt();
 a7e:	0e 94 36 04 	call	0x86c	; 0x86c <enable_WDT_interrupt>
		SMCR |= (1 << SM1);//power down sleep mode
 a82:	83 b7       	in	r24, 0x33	; 51
 a84:	84 60       	ori	r24, 0x04	; 4
 a86:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 a88:	83 b7       	in	r24, 0x33	; 51
 a8a:	81 60       	ori	r24, 0x01	; 1
 a8c:	83 bf       	out	0x33, r24	; 51
		sei();
 a8e:	78 94       	sei
		sleep_cpu();
 a90:	88 95       	sleep
		sleep_disable();
 a92:	83 b7       	in	r24, 0x33	; 51
 a94:	8e 7f       	andi	r24, 0xFE	; 254
 a96:	83 bf       	out	0x33, r24	; 51
		cli();
 a98:	f8 94       	cli
		

      }
 a9a:	dd cf       	rjmp	.-70     	; 0xa56 <FSM_tick+0xd2>
	  disable_WDT_interrupt();
 a9c:	0e 94 3c 04 	call	0x878	; 0x878 <disable_WDT_interrupt>
	  clear_touch_interrupt();
 aa0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <clear_touch_interrupt>
      break;
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <FSM_tick+0x126>

    default:
      current_state = START;
 aa6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <current_state.1657>
      break;
  }
}
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	08 95       	ret

00000ab0 <main>:

#define CURRENT_MEAS_DELAY_MS 4

int main(void)
{
	current_driver_pins_init();
 ab0:	0e 94 c3 03 	call	0x786	; 0x786 <current_driver_pins_init>
	sensor_pins_init();
 ab4:	0e 94 c6 03 	call	0x78c	; 0x78c <sensor_pins_init>
	led_pins_init();
 ab8:	0e 94 c9 03 	call	0x792	; 0x792 <led_pins_init>
	ADC_init();
 abc:	0e 94 a8 03 	call	0x750	; 0x750 <ADC_init>
	timer_0_PWM_init();
 ac0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <timer_0_PWM_init>
	timer_2_init();
 ac4:	0e 94 00 04 	call	0x800	; 0x800 <timer_2_init>
	WDT_init();
 ac8:	0e 94 2a 04 	call	0x854	; 0x854 <WDT_init>

  while (1)
  {
		FSM_tick();
 acc:	0e 94 c2 04 	call	0x984	; 0x984 <FSM_tick>
 ad0:	fd cf       	rjmp	.-6      	; 0xacc <main+0x1c>

00000ad2 <__subsf3>:
 ad2:	50 58       	subi	r21, 0x80	; 128

00000ad4 <__addsf3>:
 ad4:	bb 27       	eor	r27, r27
 ad6:	aa 27       	eor	r26, r26
 ad8:	0e 94 81 05 	call	0xb02	; 0xb02 <__addsf3x>
 adc:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_round>
 ae0:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscA>
 ae4:	38 f0       	brcs	.+14     	; 0xaf4 <__addsf3+0x20>
 ae6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__fp_pscB>
 aea:	20 f0       	brcs	.+8      	; 0xaf4 <__addsf3+0x20>
 aec:	39 f4       	brne	.+14     	; 0xafc <__addsf3+0x28>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	19 f4       	brne	.+6      	; 0xaf8 <__addsf3+0x24>
 af2:	26 f4       	brtc	.+8      	; 0xafc <__addsf3+0x28>
 af4:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_nan>
 af8:	0e f4       	brtc	.+2      	; 0xafc <__addsf3+0x28>
 afa:	e0 95       	com	r30
 afc:	e7 fb       	bst	r30, 7
 afe:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_inf>

00000b02 <__addsf3x>:
 b02:	e9 2f       	mov	r30, r25
 b04:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_split3>
 b08:	58 f3       	brcs	.-42     	; 0xae0 <__addsf3+0xc>
 b0a:	ba 17       	cp	r27, r26
 b0c:	62 07       	cpc	r22, r18
 b0e:	73 07       	cpc	r23, r19
 b10:	84 07       	cpc	r24, r20
 b12:	95 07       	cpc	r25, r21
 b14:	20 f0       	brcs	.+8      	; 0xb1e <__addsf3x+0x1c>
 b16:	79 f4       	brne	.+30     	; 0xb36 <__addsf3x+0x34>
 b18:	a6 f5       	brtc	.+104    	; 0xb82 <__addsf3x+0x80>
 b1a:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_zero>
 b1e:	0e f4       	brtc	.+2      	; 0xb22 <__addsf3x+0x20>
 b20:	e0 95       	com	r30
 b22:	0b 2e       	mov	r0, r27
 b24:	ba 2f       	mov	r27, r26
 b26:	a0 2d       	mov	r26, r0
 b28:	0b 01       	movw	r0, r22
 b2a:	b9 01       	movw	r22, r18
 b2c:	90 01       	movw	r18, r0
 b2e:	0c 01       	movw	r0, r24
 b30:	ca 01       	movw	r24, r20
 b32:	a0 01       	movw	r20, r0
 b34:	11 24       	eor	r1, r1
 b36:	ff 27       	eor	r31, r31
 b38:	59 1b       	sub	r21, r25
 b3a:	99 f0       	breq	.+38     	; 0xb62 <__addsf3x+0x60>
 b3c:	59 3f       	cpi	r21, 0xF9	; 249
 b3e:	50 f4       	brcc	.+20     	; 0xb54 <__addsf3x+0x52>
 b40:	50 3e       	cpi	r21, 0xE0	; 224
 b42:	68 f1       	brcs	.+90     	; 0xb9e <__addsf3x+0x9c>
 b44:	1a 16       	cp	r1, r26
 b46:	f0 40       	sbci	r31, 0x00	; 0
 b48:	a2 2f       	mov	r26, r18
 b4a:	23 2f       	mov	r18, r19
 b4c:	34 2f       	mov	r19, r20
 b4e:	44 27       	eor	r20, r20
 b50:	58 5f       	subi	r21, 0xF8	; 248
 b52:	f3 cf       	rjmp	.-26     	; 0xb3a <__addsf3x+0x38>
 b54:	46 95       	lsr	r20
 b56:	37 95       	ror	r19
 b58:	27 95       	ror	r18
 b5a:	a7 95       	ror	r26
 b5c:	f0 40       	sbci	r31, 0x00	; 0
 b5e:	53 95       	inc	r21
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__addsf3x+0x52>
 b62:	7e f4       	brtc	.+30     	; 0xb82 <__addsf3x+0x80>
 b64:	1f 16       	cp	r1, r31
 b66:	ba 0b       	sbc	r27, r26
 b68:	62 0b       	sbc	r22, r18
 b6a:	73 0b       	sbc	r23, r19
 b6c:	84 0b       	sbc	r24, r20
 b6e:	ba f0       	brmi	.+46     	; 0xb9e <__addsf3x+0x9c>
 b70:	91 50       	subi	r25, 0x01	; 1
 b72:	a1 f0       	breq	.+40     	; 0xb9c <__addsf3x+0x9a>
 b74:	ff 0f       	add	r31, r31
 b76:	bb 1f       	adc	r27, r27
 b78:	66 1f       	adc	r22, r22
 b7a:	77 1f       	adc	r23, r23
 b7c:	88 1f       	adc	r24, r24
 b7e:	c2 f7       	brpl	.-16     	; 0xb70 <__addsf3x+0x6e>
 b80:	0e c0       	rjmp	.+28     	; 0xb9e <__addsf3x+0x9c>
 b82:	ba 0f       	add	r27, r26
 b84:	62 1f       	adc	r22, r18
 b86:	73 1f       	adc	r23, r19
 b88:	84 1f       	adc	r24, r20
 b8a:	48 f4       	brcc	.+18     	; 0xb9e <__addsf3x+0x9c>
 b8c:	87 95       	ror	r24
 b8e:	77 95       	ror	r23
 b90:	67 95       	ror	r22
 b92:	b7 95       	ror	r27
 b94:	f7 95       	ror	r31
 b96:	9e 3f       	cpi	r25, 0xFE	; 254
 b98:	08 f0       	brcs	.+2      	; 0xb9c <__addsf3x+0x9a>
 b9a:	b0 cf       	rjmp	.-160    	; 0xafc <__addsf3+0x28>
 b9c:	93 95       	inc	r25
 b9e:	88 0f       	add	r24, r24
 ba0:	08 f0       	brcs	.+2      	; 0xba4 <__addsf3x+0xa2>
 ba2:	99 27       	eor	r25, r25
 ba4:	ee 0f       	add	r30, r30
 ba6:	97 95       	ror	r25
 ba8:	87 95       	ror	r24
 baa:	08 95       	ret

00000bac <__cmpsf2>:
 bac:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_cmp>
 bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__cmpsf2+0x8>
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	08 95       	ret

00000bb6 <__fixunssfsi>:
 bb6:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_splitA>
 bba:	88 f0       	brcs	.+34     	; 0xbde <__fixunssfsi+0x28>
 bbc:	9f 57       	subi	r25, 0x7F	; 127
 bbe:	98 f0       	brcs	.+38     	; 0xbe6 <__fixunssfsi+0x30>
 bc0:	b9 2f       	mov	r27, r25
 bc2:	99 27       	eor	r25, r25
 bc4:	b7 51       	subi	r27, 0x17	; 23
 bc6:	b0 f0       	brcs	.+44     	; 0xbf4 <__fixunssfsi+0x3e>
 bc8:	e1 f0       	breq	.+56     	; 0xc02 <__fixunssfsi+0x4c>
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	1a f0       	brmi	.+6      	; 0xbda <__fixunssfsi+0x24>
 bd4:	ba 95       	dec	r27
 bd6:	c9 f7       	brne	.-14     	; 0xbca <__fixunssfsi+0x14>
 bd8:	14 c0       	rjmp	.+40     	; 0xc02 <__fixunssfsi+0x4c>
 bda:	b1 30       	cpi	r27, 0x01	; 1
 bdc:	91 f0       	breq	.+36     	; 0xc02 <__fixunssfsi+0x4c>
 bde:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__fp_zero>
 be2:	b1 e0       	ldi	r27, 0x01	; 1
 be4:	08 95       	ret
 be6:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_zero>
 bea:	67 2f       	mov	r22, r23
 bec:	78 2f       	mov	r23, r24
 bee:	88 27       	eor	r24, r24
 bf0:	b8 5f       	subi	r27, 0xF8	; 248
 bf2:	39 f0       	breq	.+14     	; 0xc02 <__fixunssfsi+0x4c>
 bf4:	b9 3f       	cpi	r27, 0xF9	; 249
 bf6:	cc f3       	brlt	.-14     	; 0xbea <__fixunssfsi+0x34>
 bf8:	86 95       	lsr	r24
 bfa:	77 95       	ror	r23
 bfc:	67 95       	ror	r22
 bfe:	b3 95       	inc	r27
 c00:	d9 f7       	brne	.-10     	; 0xbf8 <__fixunssfsi+0x42>
 c02:	3e f4       	brtc	.+14     	; 0xc12 <__fixunssfsi+0x5c>
 c04:	90 95       	com	r25
 c06:	80 95       	com	r24
 c08:	70 95       	com	r23
 c0a:	61 95       	neg	r22
 c0c:	7f 4f       	sbci	r23, 0xFF	; 255
 c0e:	8f 4f       	sbci	r24, 0xFF	; 255
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__floatunsisf>:
 c14:	e8 94       	clt
 c16:	09 c0       	rjmp	.+18     	; 0xc2a <__floatsisf+0x12>

00000c18 <__floatsisf>:
 c18:	97 fb       	bst	r25, 7
 c1a:	3e f4       	brtc	.+14     	; 0xc2a <__floatsisf+0x12>
 c1c:	90 95       	com	r25
 c1e:	80 95       	com	r24
 c20:	70 95       	com	r23
 c22:	61 95       	neg	r22
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	99 23       	and	r25, r25
 c2c:	a9 f0       	breq	.+42     	; 0xc58 <__floatsisf+0x40>
 c2e:	f9 2f       	mov	r31, r25
 c30:	96 e9       	ldi	r25, 0x96	; 150
 c32:	bb 27       	eor	r27, r27
 c34:	93 95       	inc	r25
 c36:	f6 95       	lsr	r31
 c38:	87 95       	ror	r24
 c3a:	77 95       	ror	r23
 c3c:	67 95       	ror	r22
 c3e:	b7 95       	ror	r27
 c40:	f1 11       	cpse	r31, r1
 c42:	f8 cf       	rjmp	.-16     	; 0xc34 <__floatsisf+0x1c>
 c44:	fa f4       	brpl	.+62     	; 0xc84 <__floatsisf+0x6c>
 c46:	bb 0f       	add	r27, r27
 c48:	11 f4       	brne	.+4      	; 0xc4e <__floatsisf+0x36>
 c4a:	60 ff       	sbrs	r22, 0
 c4c:	1b c0       	rjmp	.+54     	; 0xc84 <__floatsisf+0x6c>
 c4e:	6f 5f       	subi	r22, 0xFF	; 255
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	16 c0       	rjmp	.+44     	; 0xc84 <__floatsisf+0x6c>
 c58:	88 23       	and	r24, r24
 c5a:	11 f0       	breq	.+4      	; 0xc60 <__floatsisf+0x48>
 c5c:	96 e9       	ldi	r25, 0x96	; 150
 c5e:	11 c0       	rjmp	.+34     	; 0xc82 <__floatsisf+0x6a>
 c60:	77 23       	and	r23, r23
 c62:	21 f0       	breq	.+8      	; 0xc6c <__floatsisf+0x54>
 c64:	9e e8       	ldi	r25, 0x8E	; 142
 c66:	87 2f       	mov	r24, r23
 c68:	76 2f       	mov	r23, r22
 c6a:	05 c0       	rjmp	.+10     	; 0xc76 <__floatsisf+0x5e>
 c6c:	66 23       	and	r22, r22
 c6e:	71 f0       	breq	.+28     	; 0xc8c <__floatsisf+0x74>
 c70:	96 e8       	ldi	r25, 0x86	; 134
 c72:	86 2f       	mov	r24, r22
 c74:	70 e0       	ldi	r23, 0x00	; 0
 c76:	60 e0       	ldi	r22, 0x00	; 0
 c78:	2a f0       	brmi	.+10     	; 0xc84 <__floatsisf+0x6c>
 c7a:	9a 95       	dec	r25
 c7c:	66 0f       	add	r22, r22
 c7e:	77 1f       	adc	r23, r23
 c80:	88 1f       	adc	r24, r24
 c82:	da f7       	brpl	.-10     	; 0xc7a <__floatsisf+0x62>
 c84:	88 0f       	add	r24, r24
 c86:	96 95       	lsr	r25
 c88:	87 95       	ror	r24
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <__fp_cmp>:
 c8e:	99 0f       	add	r25, r25
 c90:	00 08       	sbc	r0, r0
 c92:	55 0f       	add	r21, r21
 c94:	aa 0b       	sbc	r26, r26
 c96:	e0 e8       	ldi	r30, 0x80	; 128
 c98:	fe ef       	ldi	r31, 0xFE	; 254
 c9a:	16 16       	cp	r1, r22
 c9c:	17 06       	cpc	r1, r23
 c9e:	e8 07       	cpc	r30, r24
 ca0:	f9 07       	cpc	r31, r25
 ca2:	c0 f0       	brcs	.+48     	; 0xcd4 <__fp_cmp+0x46>
 ca4:	12 16       	cp	r1, r18
 ca6:	13 06       	cpc	r1, r19
 ca8:	e4 07       	cpc	r30, r20
 caa:	f5 07       	cpc	r31, r21
 cac:	98 f0       	brcs	.+38     	; 0xcd4 <__fp_cmp+0x46>
 cae:	62 1b       	sub	r22, r18
 cb0:	73 0b       	sbc	r23, r19
 cb2:	84 0b       	sbc	r24, r20
 cb4:	95 0b       	sbc	r25, r21
 cb6:	39 f4       	brne	.+14     	; 0xcc6 <__fp_cmp+0x38>
 cb8:	0a 26       	eor	r0, r26
 cba:	61 f0       	breq	.+24     	; 0xcd4 <__fp_cmp+0x46>
 cbc:	23 2b       	or	r18, r19
 cbe:	24 2b       	or	r18, r20
 cc0:	25 2b       	or	r18, r21
 cc2:	21 f4       	brne	.+8      	; 0xccc <__fp_cmp+0x3e>
 cc4:	08 95       	ret
 cc6:	0a 26       	eor	r0, r26
 cc8:	09 f4       	brne	.+2      	; 0xccc <__fp_cmp+0x3e>
 cca:	a1 40       	sbci	r26, 0x01	; 1
 ccc:	a6 95       	lsr	r26
 cce:	8f ef       	ldi	r24, 0xFF	; 255
 cd0:	81 1d       	adc	r24, r1
 cd2:	81 1d       	adc	r24, r1
 cd4:	08 95       	ret

00000cd6 <__fp_inf>:
 cd6:	97 f9       	bld	r25, 7
 cd8:	9f 67       	ori	r25, 0x7F	; 127
 cda:	80 e8       	ldi	r24, 0x80	; 128
 cdc:	70 e0       	ldi	r23, 0x00	; 0
 cde:	60 e0       	ldi	r22, 0x00	; 0
 ce0:	08 95       	ret

00000ce2 <__fp_nan>:
 ce2:	9f ef       	ldi	r25, 0xFF	; 255
 ce4:	80 ec       	ldi	r24, 0xC0	; 192
 ce6:	08 95       	ret

00000ce8 <__fp_pscA>:
 ce8:	00 24       	eor	r0, r0
 cea:	0a 94       	dec	r0
 cec:	16 16       	cp	r1, r22
 cee:	17 06       	cpc	r1, r23
 cf0:	18 06       	cpc	r1, r24
 cf2:	09 06       	cpc	r0, r25
 cf4:	08 95       	ret

00000cf6 <__fp_pscB>:
 cf6:	00 24       	eor	r0, r0
 cf8:	0a 94       	dec	r0
 cfa:	12 16       	cp	r1, r18
 cfc:	13 06       	cpc	r1, r19
 cfe:	14 06       	cpc	r1, r20
 d00:	05 06       	cpc	r0, r21
 d02:	08 95       	ret

00000d04 <__fp_round>:
 d04:	09 2e       	mov	r0, r25
 d06:	03 94       	inc	r0
 d08:	00 0c       	add	r0, r0
 d0a:	11 f4       	brne	.+4      	; 0xd10 <__fp_round+0xc>
 d0c:	88 23       	and	r24, r24
 d0e:	52 f0       	brmi	.+20     	; 0xd24 <__fp_round+0x20>
 d10:	bb 0f       	add	r27, r27
 d12:	40 f4       	brcc	.+16     	; 0xd24 <__fp_round+0x20>
 d14:	bf 2b       	or	r27, r31
 d16:	11 f4       	brne	.+4      	; 0xd1c <__fp_round+0x18>
 d18:	60 ff       	sbrs	r22, 0
 d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__fp_round+0x20>
 d1c:	6f 5f       	subi	r22, 0xFF	; 255
 d1e:	7f 4f       	sbci	r23, 0xFF	; 255
 d20:	8f 4f       	sbci	r24, 0xFF	; 255
 d22:	9f 4f       	sbci	r25, 0xFF	; 255
 d24:	08 95       	ret

00000d26 <__fp_split3>:
 d26:	57 fd       	sbrc	r21, 7
 d28:	90 58       	subi	r25, 0x80	; 128
 d2a:	44 0f       	add	r20, r20
 d2c:	55 1f       	adc	r21, r21
 d2e:	59 f0       	breq	.+22     	; 0xd46 <__fp_splitA+0x10>
 d30:	5f 3f       	cpi	r21, 0xFF	; 255
 d32:	71 f0       	breq	.+28     	; 0xd50 <__fp_splitA+0x1a>
 d34:	47 95       	ror	r20

00000d36 <__fp_splitA>:
 d36:	88 0f       	add	r24, r24
 d38:	97 fb       	bst	r25, 7
 d3a:	99 1f       	adc	r25, r25
 d3c:	61 f0       	breq	.+24     	; 0xd56 <__fp_splitA+0x20>
 d3e:	9f 3f       	cpi	r25, 0xFF	; 255
 d40:	79 f0       	breq	.+30     	; 0xd60 <__fp_splitA+0x2a>
 d42:	87 95       	ror	r24
 d44:	08 95       	ret
 d46:	12 16       	cp	r1, r18
 d48:	13 06       	cpc	r1, r19
 d4a:	14 06       	cpc	r1, r20
 d4c:	55 1f       	adc	r21, r21
 d4e:	f2 cf       	rjmp	.-28     	; 0xd34 <__fp_split3+0xe>
 d50:	46 95       	lsr	r20
 d52:	f1 df       	rcall	.-30     	; 0xd36 <__fp_splitA>
 d54:	08 c0       	rjmp	.+16     	; 0xd66 <__fp_splitA+0x30>
 d56:	16 16       	cp	r1, r22
 d58:	17 06       	cpc	r1, r23
 d5a:	18 06       	cpc	r1, r24
 d5c:	99 1f       	adc	r25, r25
 d5e:	f1 cf       	rjmp	.-30     	; 0xd42 <__fp_splitA+0xc>
 d60:	86 95       	lsr	r24
 d62:	71 05       	cpc	r23, r1
 d64:	61 05       	cpc	r22, r1
 d66:	08 94       	sec
 d68:	08 95       	ret

00000d6a <__fp_zero>:
 d6a:	e8 94       	clt

00000d6c <__fp_szero>:
 d6c:	bb 27       	eor	r27, r27
 d6e:	66 27       	eor	r22, r22
 d70:	77 27       	eor	r23, r23
 d72:	cb 01       	movw	r24, r22
 d74:	97 f9       	bld	r25, 7
 d76:	08 95       	ret

00000d78 <__gesf2>:
 d78:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_cmp>
 d7c:	08 f4       	brcc	.+2      	; 0xd80 <__gesf2+0x8>
 d7e:	8f ef       	ldi	r24, 0xFF	; 255
 d80:	08 95       	ret

00000d82 <__mulsf3>:
 d82:	0e 94 d4 06 	call	0xda8	; 0xda8 <__mulsf3x>
 d86:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_round>
 d8a:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscA>
 d8e:	38 f0       	brcs	.+14     	; 0xd9e <__mulsf3+0x1c>
 d90:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__fp_pscB>
 d94:	20 f0       	brcs	.+8      	; 0xd9e <__mulsf3+0x1c>
 d96:	95 23       	and	r25, r21
 d98:	11 f0       	breq	.+4      	; 0xd9e <__mulsf3+0x1c>
 d9a:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_inf>
 d9e:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_nan>
 da2:	11 24       	eor	r1, r1
 da4:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_szero>

00000da8 <__mulsf3x>:
 da8:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_split3>
 dac:	70 f3       	brcs	.-36     	; 0xd8a <__mulsf3+0x8>

00000dae <__mulsf3_pse>:
 dae:	95 9f       	mul	r25, r21
 db0:	c1 f3       	breq	.-16     	; 0xda2 <__mulsf3+0x20>
 db2:	95 0f       	add	r25, r21
 db4:	50 e0       	ldi	r21, 0x00	; 0
 db6:	55 1f       	adc	r21, r21
 db8:	62 9f       	mul	r22, r18
 dba:	f0 01       	movw	r30, r0
 dbc:	72 9f       	mul	r23, r18
 dbe:	bb 27       	eor	r27, r27
 dc0:	f0 0d       	add	r31, r0
 dc2:	b1 1d       	adc	r27, r1
 dc4:	63 9f       	mul	r22, r19
 dc6:	aa 27       	eor	r26, r26
 dc8:	f0 0d       	add	r31, r0
 dca:	b1 1d       	adc	r27, r1
 dcc:	aa 1f       	adc	r26, r26
 dce:	64 9f       	mul	r22, r20
 dd0:	66 27       	eor	r22, r22
 dd2:	b0 0d       	add	r27, r0
 dd4:	a1 1d       	adc	r26, r1
 dd6:	66 1f       	adc	r22, r22
 dd8:	82 9f       	mul	r24, r18
 dda:	22 27       	eor	r18, r18
 ddc:	b0 0d       	add	r27, r0
 dde:	a1 1d       	adc	r26, r1
 de0:	62 1f       	adc	r22, r18
 de2:	73 9f       	mul	r23, r19
 de4:	b0 0d       	add	r27, r0
 de6:	a1 1d       	adc	r26, r1
 de8:	62 1f       	adc	r22, r18
 dea:	83 9f       	mul	r24, r19
 dec:	a0 0d       	add	r26, r0
 dee:	61 1d       	adc	r22, r1
 df0:	22 1f       	adc	r18, r18
 df2:	74 9f       	mul	r23, r20
 df4:	33 27       	eor	r19, r19
 df6:	a0 0d       	add	r26, r0
 df8:	61 1d       	adc	r22, r1
 dfa:	23 1f       	adc	r18, r19
 dfc:	84 9f       	mul	r24, r20
 dfe:	60 0d       	add	r22, r0
 e00:	21 1d       	adc	r18, r1
 e02:	82 2f       	mov	r24, r18
 e04:	76 2f       	mov	r23, r22
 e06:	6a 2f       	mov	r22, r26
 e08:	11 24       	eor	r1, r1
 e0a:	9f 57       	subi	r25, 0x7F	; 127
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	9a f0       	brmi	.+38     	; 0xe36 <__mulsf3_pse+0x88>
 e10:	f1 f0       	breq	.+60     	; 0xe4e <__mulsf3_pse+0xa0>
 e12:	88 23       	and	r24, r24
 e14:	4a f0       	brmi	.+18     	; 0xe28 <__mulsf3_pse+0x7a>
 e16:	ee 0f       	add	r30, r30
 e18:	ff 1f       	adc	r31, r31
 e1a:	bb 1f       	adc	r27, r27
 e1c:	66 1f       	adc	r22, r22
 e1e:	77 1f       	adc	r23, r23
 e20:	88 1f       	adc	r24, r24
 e22:	91 50       	subi	r25, 0x01	; 1
 e24:	50 40       	sbci	r21, 0x00	; 0
 e26:	a9 f7       	brne	.-22     	; 0xe12 <__mulsf3_pse+0x64>
 e28:	9e 3f       	cpi	r25, 0xFE	; 254
 e2a:	51 05       	cpc	r21, r1
 e2c:	80 f0       	brcs	.+32     	; 0xe4e <__mulsf3_pse+0xa0>
 e2e:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_inf>
 e32:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_szero>
 e36:	5f 3f       	cpi	r21, 0xFF	; 255
 e38:	e4 f3       	brlt	.-8      	; 0xe32 <__mulsf3_pse+0x84>
 e3a:	98 3e       	cpi	r25, 0xE8	; 232
 e3c:	d4 f3       	brlt	.-12     	; 0xe32 <__mulsf3_pse+0x84>
 e3e:	86 95       	lsr	r24
 e40:	77 95       	ror	r23
 e42:	67 95       	ror	r22
 e44:	b7 95       	ror	r27
 e46:	f7 95       	ror	r31
 e48:	e7 95       	ror	r30
 e4a:	9f 5f       	subi	r25, 0xFF	; 255
 e4c:	c1 f7       	brne	.-16     	; 0xe3e <__mulsf3_pse+0x90>
 e4e:	fe 2b       	or	r31, r30
 e50:	88 0f       	add	r24, r24
 e52:	91 1d       	adc	r25, r1
 e54:	96 95       	lsr	r25
 e56:	87 95       	ror	r24
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <__udivmodhi4>:
 e5c:	aa 1b       	sub	r26, r26
 e5e:	bb 1b       	sub	r27, r27
 e60:	51 e1       	ldi	r21, 0x11	; 17
 e62:	07 c0       	rjmp	.+14     	; 0xe72 <__udivmodhi4_ep>

00000e64 <__udivmodhi4_loop>:
 e64:	aa 1f       	adc	r26, r26
 e66:	bb 1f       	adc	r27, r27
 e68:	a6 17       	cp	r26, r22
 e6a:	b7 07       	cpc	r27, r23
 e6c:	10 f0       	brcs	.+4      	; 0xe72 <__udivmodhi4_ep>
 e6e:	a6 1b       	sub	r26, r22
 e70:	b7 0b       	sbc	r27, r23

00000e72 <__udivmodhi4_ep>:
 e72:	88 1f       	adc	r24, r24
 e74:	99 1f       	adc	r25, r25
 e76:	5a 95       	dec	r21
 e78:	a9 f7       	brne	.-22     	; 0xe64 <__udivmodhi4_loop>
 e7a:	80 95       	com	r24
 e7c:	90 95       	com	r25
 e7e:	bc 01       	movw	r22, r24
 e80:	cd 01       	movw	r24, r26
 e82:	08 95       	ret

00000e84 <__divmodhi4>:
 e84:	97 fb       	bst	r25, 7
 e86:	07 2e       	mov	r0, r23
 e88:	16 f4       	brtc	.+4      	; 0xe8e <__divmodhi4+0xa>
 e8a:	00 94       	com	r0
 e8c:	07 d0       	rcall	.+14     	; 0xe9c <__divmodhi4_neg1>
 e8e:	77 fd       	sbrc	r23, 7
 e90:	09 d0       	rcall	.+18     	; 0xea4 <__divmodhi4_neg2>
 e92:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodhi4>
 e96:	07 fc       	sbrc	r0, 7
 e98:	05 d0       	rcall	.+10     	; 0xea4 <__divmodhi4_neg2>
 e9a:	3e f4       	brtc	.+14     	; 0xeaa <__divmodhi4_exit>

00000e9c <__divmodhi4_neg1>:
 e9c:	90 95       	com	r25
 e9e:	81 95       	neg	r24
 ea0:	9f 4f       	sbci	r25, 0xFF	; 255
 ea2:	08 95       	ret

00000ea4 <__divmodhi4_neg2>:
 ea4:	70 95       	com	r23
 ea6:	61 95       	neg	r22
 ea8:	7f 4f       	sbci	r23, 0xFF	; 255

00000eaa <__divmodhi4_exit>:
 eaa:	08 95       	ret

00000eac <_exit>:
 eac:	f8 94       	cli

00000eae <__stop_program>:
 eae:	ff cf       	rjmp	.-2      	; 0xeae <__stop_program>
