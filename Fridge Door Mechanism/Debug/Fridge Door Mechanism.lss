
Fridge Door Mechanism.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000f38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a4  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c78  00000000  00000000  00002b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001015  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  000047ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf1  00000000  00000000  00005475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_6>
  1c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 62 05 	call	0xac4	; 0xac4 <main>
  88:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <get_door_state_uncalib>:
uint16_t closing_door_open_current = 0;

uint16_t opening_door_closed_current = 0;
uint16_t opening_door_open_current = 0;

enum door_state get_door_state_uncalib(enum door_state state, enum door_state intended_state){
  90:	cf 92       	push	r12
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	18 2f       	mov	r17, r24
  a2:	06 2f       	mov	r16, r22
	/*Always measure with door closed when calibrating as when the fridge is first started, this may be safely assumed*/
	
	uint16_t ADC_count_4_ms;
	if (state == UNKNOWN){
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	31 f4       	brne	.+12     	; 0xb4 <get_door_state_uncalib+0x24>
		ADC_count_4_ms = measure_current_rise(DOOR_CLOSED, DOOR_CLOSED);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
  b0:	ec 01       	movw	r28, r24
  b2:	03 c0       	rjmp	.+6      	; 0xba <get_door_state_uncalib+0x2a>
	}
	else {
		ADC_count_4_ms = measure_current_rise(state , intended_state);
  b4:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
  b8:	ec 01       	movw	r28, r24
	}
	
	uint16_t *door_closed, *door_open;
	uint16_t min_i, max_i, average_i;
	
	if (intended_state == DOOR_OPEN){
  ba:	00 23       	and	r16, r16
  bc:	99 f0       	breq	.+38     	; 0xe4 <get_door_state_uncalib+0x54>
	else {		
		door_closed = &closing_door_closed_current;
		door_open = &closing_door_open_current;
		min_i = MIN_CLOSING_50_DC_4_MS;
		max_i = MAX_CLOSING_50_DC_4_MS;
		average_i = AVERAGE_CLOSING_50_DC_4_MS;		
  be:	8e e6       	ldi	r24, 0x6E	; 110
  c0:	92 e0       	ldi	r25, 0x02	; 2
	}
	else {		
		door_closed = &closing_door_closed_current;
		door_open = &closing_door_open_current;
		min_i = MIN_CLOSING_50_DC_4_MS;
		max_i = MAX_CLOSING_50_DC_4_MS;
  c2:	e4 e2       	ldi	r30, 0x24	; 36
  c4:	f3 e0       	ldi	r31, 0x03	; 3
		average_i = AVERAGE_OPENING_50_DC_4_MS;
	}
	else {		
		door_closed = &closing_door_closed_current;
		door_open = &closing_door_open_current;
		min_i = MIN_CLOSING_50_DC_4_MS;
  c6:	29 eb       	ldi	r18, 0xB9	; 185
  c8:	31 e0       	ldi	r19, 0x01	; 1
		max_i = MAX_OPENING_50_DC_4_MS;
		average_i = AVERAGE_OPENING_50_DC_4_MS;
	}
	else {		
		door_closed = &closing_door_closed_current;
		door_open = &closing_door_open_current;
  ca:	0f 2e       	mov	r0, r31
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	cf 2e       	mov	r12, r31
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	df 2e       	mov	r13, r31
  d4:	f0 2d       	mov	r31, r0
		min_i = MIN_OPENING_50_DC_4_MS;
		max_i = MAX_OPENING_50_DC_4_MS;
		average_i = AVERAGE_OPENING_50_DC_4_MS;
	}
	else {		
		door_closed = &closing_door_closed_current;
  d6:	0f 2e       	mov	r0, r31
  d8:	f6 e0       	ldi	r31, 0x06	; 6
  da:	ef 2e       	mov	r14, r31
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	ff 2e       	mov	r15, r31
  e0:	f0 2d       	mov	r31, r0
  e2:	12 c0       	rjmp	.+36     	; 0x108 <get_door_state_uncalib+0x78>
	if (intended_state == DOOR_OPEN){
		door_closed = &opening_door_closed_current;
		door_open = &opening_door_open_current;
		min_i = MIN_OPENING_50_DC_4_MS;
		max_i = MAX_OPENING_50_DC_4_MS;
		average_i = AVERAGE_OPENING_50_DC_4_MS;
  e4:	8b e8       	ldi	r24, 0x8B	; 139
  e6:	92 e0       	ldi	r25, 0x02	; 2
	
	if (intended_state == DOOR_OPEN){
		door_closed = &opening_door_closed_current;
		door_open = &opening_door_open_current;
		min_i = MIN_OPENING_50_DC_4_MS;
		max_i = MAX_OPENING_50_DC_4_MS;
  e8:	e4 ee       	ldi	r30, 0xE4	; 228
  ea:	f1 e0       	ldi	r31, 0x01	; 1
	uint16_t min_i, max_i, average_i;
	
	if (intended_state == DOOR_OPEN){
		door_closed = &opening_door_closed_current;
		door_open = &opening_door_open_current;
		min_i = MIN_OPENING_50_DC_4_MS;
  ec:	21 e3       	ldi	r18, 0x31	; 49
  ee:	33 e0       	ldi	r19, 0x03	; 3
	uint16_t *door_closed, *door_open;
	uint16_t min_i, max_i, average_i;
	
	if (intended_state == DOOR_OPEN){
		door_closed = &opening_door_closed_current;
		door_open = &opening_door_open_current;
  f0:	0f 2e       	mov	r0, r31
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	cf 2e       	mov	r12, r31
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	df 2e       	mov	r13, r31
  fa:	f0 2d       	mov	r31, r0
	
	uint16_t *door_closed, *door_open;
	uint16_t min_i, max_i, average_i;
	
	if (intended_state == DOOR_OPEN){
		door_closed = &opening_door_closed_current;
  fc:	0f 2e       	mov	r0, r31
  fe:	f2 e0       	ldi	r31, 0x02	; 2
 100:	ef 2e       	mov	r14, r31
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	ff 2e       	mov	r15, r31
 106:	f0 2d       	mov	r31, r0
		max_i = MAX_CLOSING_50_DC_4_MS;
		average_i = AVERAGE_CLOSING_50_DC_4_MS;		
	}
	
	/*if below average, most likely closing*/
	if (ADC_count_4_ms < average_i){
 108:	c8 17       	cp	r28, r24
 10a:	d9 07       	cpc	r29, r25
 10c:	88 f5       	brcc	.+98     	; 0x170 <get_door_state_uncalib+0xe0>
		/*15% variation allowed*/
		if (((abs(ADC_count_4_ms - min_i)*100) / ADC_count_4_ms) < 15){
 10e:	ce 01       	movw	r24, r28
 110:	82 1b       	sub	r24, r18
 112:	93 0b       	sbc	r25, r19
 114:	9c 01       	movw	r18, r24
 116:	22 f4       	brpl	.+8      	; 0x120 <get_door_state_uncalib+0x90>
 118:	22 27       	eor	r18, r18
 11a:	33 27       	eor	r19, r19
 11c:	28 1b       	sub	r18, r24
 11e:	39 0b       	sbc	r19, r25
 120:	44 e6       	ldi	r20, 0x64	; 100
 122:	42 9f       	mul	r20, r18
 124:	c0 01       	movw	r24, r0
 126:	43 9f       	mul	r20, r19
 128:	90 0d       	add	r25, r0
 12a:	11 24       	eor	r1, r1
 12c:	be 01       	movw	r22, r28
 12e:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 132:	6f 30       	cpi	r22, 0x0F	; 15
 134:	71 05       	cpc	r23, r1
 136:	28 f4       	brcc	.+10     	; 0x142 <get_door_state_uncalib+0xb2>
			*door_closed = ADC_count_4_ms;
 138:	f7 01       	movw	r30, r14
 13a:	d1 83       	std	Z+1, r29	; 0x01
 13c:	c0 83       	st	Z, r28
			return DOOR_CLOSED;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	6c c0       	rjmp	.+216    	; 0x21a <get_door_state_uncalib+0x18a>
			return DOOR_CLOSED;
		}
		
		else {
			/*Door is likely to be slightly open*/
			switches(1, DOOR_CLOSED);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
			timer_wait(15);
 14a:	6f e0       	ldi	r22, 0x0F	; 15
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>
			switches(0, DOOR_CLOSED);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
			
			uint16_t repeat_ADC_count = measure_current_rise(intended_state, intended_state);
 15e:	60 2f       	mov	r22, r16
 160:	80 2f       	mov	r24, r16
 162:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
			
			if (((repeat_ADC_count - ADC_count_4_ms) < 0) && (((repeat_ADC_count - ADC_count_4_ms)*100)/repeat_ADC_count > 2)) {
				get_door_state_uncalib(state, intended_state);
			} 
			else{
				*door_closed = ADC_count_4_ms;
 166:	f7 01       	movw	r30, r14
 168:	d1 83       	std	Z+1, r29	; 0x01
 16a:	c0 83       	st	Z, r28
				return DOOR_CLOSED;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	55 c0       	rjmp	.+170    	; 0x21a <get_door_state_uncalib+0x18a>
			}
		}
	}
	else if (ADC_count_4_ms > average_i){
 170:	8c 17       	cp	r24, r28
 172:	9d 07       	cpc	r25, r29
 174:	08 f0       	brcs	.+2      	; 0x178 <get_door_state_uncalib+0xe8>
 176:	4c c0       	rjmp	.+152    	; 0x210 <get_door_state_uncalib+0x180>
		/*15% variation allowed*/
		if (((abs(ADC_count_4_ms - max_i)*100)/ADC_count_4_ms) < 15){
 178:	ce 01       	movw	r24, r28
 17a:	8e 1b       	sub	r24, r30
 17c:	9f 0b       	sbc	r25, r31
 17e:	9c 01       	movw	r18, r24
 180:	22 f4       	brpl	.+8      	; 0x18a <get_door_state_uncalib+0xfa>
 182:	22 27       	eor	r18, r18
 184:	33 27       	eor	r19, r19
 186:	28 1b       	sub	r18, r24
 188:	39 0b       	sbc	r19, r25
 18a:	44 e6       	ldi	r20, 0x64	; 100
 18c:	42 9f       	mul	r20, r18
 18e:	c0 01       	movw	r24, r0
 190:	43 9f       	mul	r20, r19
 192:	90 0d       	add	r25, r0
 194:	11 24       	eor	r1, r1
 196:	be 01       	movw	r22, r28
 198:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 19c:	6f 30       	cpi	r22, 0x0F	; 15
 19e:	71 05       	cpc	r23, r1
 1a0:	28 f4       	brcc	.+10     	; 0x1ac <get_door_state_uncalib+0x11c>
			*door_open = ADC_count_4_ms;
 1a2:	f6 01       	movw	r30, r12
 1a4:	d1 83       	std	Z+1, r29	; 0x01
 1a6:	c0 83       	st	Z, r28
			return DOOR_OPEN;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	37 c0       	rjmp	.+110    	; 0x21a <get_door_state_uncalib+0x18a>
		}
		else if ((ADC_count_4_ms - max_i) > 0){
 1ac:	ce 17       	cp	r28, r30
 1ae:	df 07       	cpc	r29, r31
 1b0:	29 f0       	breq	.+10     	; 0x1bc <get_door_state_uncalib+0x12c>
			*door_open = ADC_count_4_ms;
 1b2:	f6 01       	movw	r30, r12
 1b4:	d1 83       	std	Z+1, r29	; 0x01
 1b6:	c0 83       	st	Z, r28
			return DOOR_OPEN;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	2f c0       	rjmp	.+94     	; 0x21a <get_door_state_uncalib+0x18a>
		}
		else {
			switches(1, DOOR_CLOSED);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
			timer_wait(15);
 1c4:	6f e0       	ldi	r22, 0x0F	; 15
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>
			switches(0, DOOR_CLOSED);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
			
			uint16_t repeat_ADC_count = measure_current_rise(intended_state, intended_state);
 1d8:	60 2f       	mov	r22, r16
 1da:	80 2f       	mov	r24, r16
 1dc:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
 1e0:	bc 01       	movw	r22, r24
			
			if ((repeat_ADC_count - ADC_count_4_ms) > 0 && ((((repeat_ADC_count) - ADC_count_4_ms)*100)/repeat_ADC_count) > 2){
 1e2:	c8 17       	cp	r28, r24
 1e4:	d9 07       	cpc	r29, r25
 1e6:	b1 f0       	breq	.+44     	; 0x214 <get_door_state_uncalib+0x184>
 1e8:	9c 01       	movw	r18, r24
 1ea:	2c 1b       	sub	r18, r28
 1ec:	3d 0b       	sbc	r19, r29
 1ee:	44 e6       	ldi	r20, 0x64	; 100
 1f0:	42 9f       	mul	r20, r18
 1f2:	c0 01       	movw	r24, r0
 1f4:	43 9f       	mul	r20, r19
 1f6:	90 0d       	add	r25, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 1fe:	63 30       	cpi	r22, 0x03	; 3
 200:	71 05       	cpc	r23, r1
 202:	50 f0       	brcs	.+20     	; 0x218 <get_door_state_uncalib+0x188>
				get_door_state_uncalib(state, intended_state);
 204:	60 2f       	mov	r22, r16
 206:	81 2f       	mov	r24, r17
 208:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
			}
		}
	}
	
	/*In case nothing matches (very unlikely) assume state has not changed*/
	return state;
 20c:	81 2f       	mov	r24, r17
			switches(0, DOOR_CLOSED);
			
			uint16_t repeat_ADC_count = measure_current_rise(intended_state, intended_state);
			
			if ((repeat_ADC_count - ADC_count_4_ms) > 0 && ((((repeat_ADC_count) - ADC_count_4_ms)*100)/repeat_ADC_count) > 2){
				get_door_state_uncalib(state, intended_state);
 20e:	05 c0       	rjmp	.+10     	; 0x21a <get_door_state_uncalib+0x18a>
			}
		}
	}
	
	/*In case nothing matches (very unlikely) assume state has not changed*/
	return state;
 210:	81 2f       	mov	r24, r17
 212:	03 c0       	rjmp	.+6      	; 0x21a <get_door_state_uncalib+0x18a>
			
			if ((repeat_ADC_count - ADC_count_4_ms) > 0 && ((((repeat_ADC_count) - ADC_count_4_ms)*100)/repeat_ADC_count) > 2){
				get_door_state_uncalib(state, intended_state);
			}
			else {
				return DOOR_OPEN;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <get_door_state_uncalib+0x18a>
 218:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	/*In case nothing matches (very unlikely) assume state has not changed*/
	return state;
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	cf 90       	pop	r12
 22a:	08 95       	ret

0000022c <get_door_state>:

	  /*door closed should always be at least 40% higher than door open. Maximum divergences in door door closed are ~31%
	  !!!! These numbers, I believe are not for 10% */
  enum door_state get_door_state(enum door_state state, enum door_state intended_state){
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	c8 2f       	mov	r28, r24
 23e:	d6 2f       	mov	r29, r22
	  
	  if (!closing_door_closed_current || !closing_door_open_current || !opening_door_closed_current || !opening_door_open_current){
 240:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <closing_door_closed_current>
 244:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <closing_door_closed_current+0x1>
 248:	89 2b       	or	r24, r25
 24a:	91 f0       	breq	.+36     	; 0x270 <get_door_state+0x44>
 24c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <closing_door_open_current>
 250:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <closing_door_open_current+0x1>
 254:	89 2b       	or	r24, r25
 256:	61 f0       	breq	.+24     	; 0x270 <get_door_state+0x44>
 258:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <opening_door_closed_current>
 25c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <opening_door_closed_current+0x1>
 260:	89 2b       	or	r24, r25
 262:	31 f0       	breq	.+12     	; 0x270 <get_door_state+0x44>
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 26c:	89 2b       	or	r24, r25
 26e:	29 f4       	brne	.+10     	; 0x27a <get_door_state+0x4e>
		  return get_door_state_uncalib(state, intended_state);
 270:	6d 2f       	mov	r22, r29
 272:	8c 2f       	mov	r24, r28
 274:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
 278:	c2 c0       	rjmp	.+388    	; 0x3fe <get_door_state+0x1d2>
	  }

	  uint16_t i_ADC = measure_current_rise(state, intended_state);
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
 280:	8c 01       	movw	r16, r24

	  uint16_t door_open, door_closed;
	  
	  if (intended_state == DOOR_CLOSED){
 282:	d1 30       	cpi	r29, 0x01	; 1
 284:	09 f0       	breq	.+2      	; 0x288 <get_door_state+0x5c>
 286:	4a c0       	rjmp	.+148    	; 0x31c <get_door_state+0xf0>
		  door_open = abs(i_ADC-closing_door_closed_current)*100 / i_ADC;
 288:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <closing_door_closed_current>
 28c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <closing_door_closed_current+0x1>
 290:	98 01       	movw	r18, r16
 292:	28 1b       	sub	r18, r24
 294:	39 0b       	sbc	r19, r25
 296:	c9 01       	movw	r24, r18
 298:	22 f4       	brpl	.+8      	; 0x2a2 <get_door_state+0x76>
 29a:	22 27       	eor	r18, r18
 29c:	33 27       	eor	r19, r19
 29e:	28 1b       	sub	r18, r24
 2a0:	39 0b       	sbc	r19, r25
 2a2:	44 e6       	ldi	r20, 0x64	; 100
 2a4:	42 9f       	mul	r20, r18
 2a6:	c0 01       	movw	r24, r0
 2a8:	43 9f       	mul	r20, r19
 2aa:	90 0d       	add	r25, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	b8 01       	movw	r22, r16
 2b0:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 2b4:	fb 01       	movw	r30, r22
		  door_closed = abs(i_ADC-closing_door_open_current)*100 / i_ADC;
 2b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <closing_door_open_current>
 2ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <closing_door_open_current+0x1>
 2be:	98 01       	movw	r18, r16
 2c0:	28 1b       	sub	r18, r24
 2c2:	39 0b       	sbc	r19, r25
 2c4:	c9 01       	movw	r24, r18
 2c6:	22 f4       	brpl	.+8      	; 0x2d0 <get_door_state+0xa4>
 2c8:	22 27       	eor	r18, r18
 2ca:	33 27       	eor	r19, r19
 2cc:	28 1b       	sub	r18, r24
 2ce:	39 0b       	sbc	r19, r25
 2d0:	44 e6       	ldi	r20, 0x64	; 100
 2d2:	42 9f       	mul	r20, r18
 2d4:	c0 01       	movw	r24, r0
 2d6:	43 9f       	mul	r20, r19
 2d8:	90 0d       	add	r25, r0
 2da:	11 24       	eor	r1, r1
 2dc:	b8 01       	movw	r22, r16
 2de:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
		  
		  if (door_closed < 31 && door_open > 40){
 2e2:	6f 31       	cpi	r22, 0x1F	; 31
 2e4:	71 05       	cpc	r23, r1
 2e6:	48 f4       	brcc	.+18     	; 0x2fa <get_door_state+0xce>
 2e8:	e9 32       	cpi	r30, 0x29	; 41
 2ea:	f1 05       	cpc	r31, r1
 2ec:	30 f0       	brcs	.+12     	; 0x2fa <get_door_state+0xce>
			  closing_door_closed_current = i_ADC;
 2ee:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <closing_door_closed_current+0x1>
 2f2:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <closing_door_closed_current>
			  return DOOR_CLOSED;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	82 c0       	rjmp	.+260    	; 0x3fe <get_door_state+0x1d2>
		  }
		  else if (door_open < 15 && door_closed > 40){
 2fa:	3f 97       	sbiw	r30, 0x0f	; 15
 2fc:	48 f4       	brcc	.+18     	; 0x310 <get_door_state+0xe4>
 2fe:	69 32       	cpi	r22, 0x29	; 41
 300:	71 05       	cpc	r23, r1
 302:	30 f0       	brcs	.+12     	; 0x310 <get_door_state+0xe4>
			  closing_door_open_current = i_ADC;
 304:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <closing_door_open_current+0x1>
 308:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <closing_door_open_current>
			  return DOOR_OPEN;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	77 c0       	rjmp	.+238    	; 0x3fe <get_door_state+0x1d2>
		  }
		  else{
			  get_door_state_uncalib(state, intended_state);
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
		  else{
			  get_door_state_uncalib(state, intended_state);
		  }	  
	  }
	  
	  return state;
 318:	8c 2f       	mov	r24, r28
 31a:	71 c0       	rjmp	.+226    	; 0x3fe <get_door_state+0x1d2>
		  }
		  else{
			  get_door_state_uncalib(state, intended_state);
		  }	  
	  }
	  else if (intended_state == DOOR_OPEN){
 31c:	d1 11       	cpse	r29, r1
 31e:	6e c0       	rjmp	.+220    	; 0x3fc <get_door_state+0x1d0>
		  door_open = abs(i_ADC-opening_door_open_current)*100 / i_ADC;
 320:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 324:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 328:	98 01       	movw	r18, r16
 32a:	28 1b       	sub	r18, r24
 32c:	39 0b       	sbc	r19, r25
 32e:	c9 01       	movw	r24, r18
 330:	22 f4       	brpl	.+8      	; 0x33a <get_door_state+0x10e>
 332:	22 27       	eor	r18, r18
 334:	33 27       	eor	r19, r19
 336:	28 1b       	sub	r18, r24
 338:	39 0b       	sbc	r19, r25
 33a:	44 e6       	ldi	r20, 0x64	; 100
 33c:	42 9f       	mul	r20, r18
 33e:	c0 01       	movw	r24, r0
 340:	43 9f       	mul	r20, r19
 342:	90 0d       	add	r25, r0
 344:	11 24       	eor	r1, r1
 346:	b8 01       	movw	r22, r16
 348:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 34c:	6b 01       	movw	r12, r22
		  door_closed = abs(i_ADC-opening_door_closed_current)*100 / i_ADC;
 34e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <opening_door_closed_current>
 352:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <opening_door_closed_current+0x1>
 356:	98 01       	movw	r18, r16
 358:	28 1b       	sub	r18, r24
 35a:	39 0b       	sbc	r19, r25
 35c:	c9 01       	movw	r24, r18
 35e:	22 f4       	brpl	.+8      	; 0x368 <get_door_state+0x13c>
 360:	22 27       	eor	r18, r18
 362:	33 27       	eor	r19, r19
 364:	28 1b       	sub	r18, r24
 366:	39 0b       	sbc	r19, r25
 368:	44 e6       	ldi	r20, 0x64	; 100
 36a:	42 9f       	mul	r20, r18
 36c:	c0 01       	movw	r24, r0
 36e:	43 9f       	mul	r20, r19
 370:	90 0d       	add	r25, r0
 372:	11 24       	eor	r1, r1
 374:	b8 01       	movw	r22, r16
 376:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 37a:	7b 01       	movw	r14, r22
		  
		  if ((door_closed < 31) && (door_open > 0.40)){
 37c:	6f 31       	cpi	r22, 0x1F	; 31
 37e:	71 05       	cpc	r23, r1
 380:	98 f4       	brcc	.+38     	; 0x3a8 <get_door_state+0x17c>
 382:	b6 01       	movw	r22, r12
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
 38c:	2d ec       	ldi	r18, 0xCD	; 205
 38e:	3c ec       	ldi	r19, 0xCC	; 204
 390:	4c ec       	ldi	r20, 0xCC	; 204
 392:	5e e3       	ldi	r21, 0x3E	; 62
 394:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__gesf2>
 398:	18 16       	cp	r1, r24
 39a:	34 f4       	brge	.+12     	; 0x3a8 <get_door_state+0x17c>
			  opening_door_closed_current = i_ADC;
 39c:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <opening_door_closed_current+0x1>
 3a0:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <opening_door_closed_current>
			  return DOOR_CLOSED;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	2b c0       	rjmp	.+86     	; 0x3fe <get_door_state+0x1d2>
		  }
		  else if ((door_open < 0.15) & (door_closed > 0.40)){
 3a8:	b6 01       	movw	r22, r12
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
 3b2:	2a e9       	ldi	r18, 0x9A	; 154
 3b4:	39 e9       	ldi	r19, 0x99	; 153
 3b6:	49 e1       	ldi	r20, 0x19	; 25
 3b8:	5e e3       	ldi	r21, 0x3E	; 62
 3ba:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__cmpsf2>
 3be:	88 23       	and	r24, r24
 3c0:	bc f4       	brge	.+46     	; 0x3f0 <get_door_state+0x1c4>
 3c2:	b7 01       	movw	r22, r14
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
 3cc:	d1 e0       	ldi	r29, 0x01	; 1
 3ce:	2d ec       	ldi	r18, 0xCD	; 205
 3d0:	3c ec       	ldi	r19, 0xCC	; 204
 3d2:	4c ec       	ldi	r20, 0xCC	; 204
 3d4:	5e e3       	ldi	r21, 0x3E	; 62
 3d6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__gesf2>
 3da:	18 16       	cp	r1, r24
 3dc:	0c f0       	brlt	.+2      	; 0x3e0 <get_door_state+0x1b4>
 3de:	d0 e0       	ldi	r29, 0x00	; 0
 3e0:	dd 23       	and	r29, r29
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <get_door_state+0x1c4>
			  opening_door_open_current = i_ADC;
 3e4:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <_edata+0x1>
 3e8:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			  return DOOR_OPEN;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <get_door_state+0x1d2>
		  }
		  else{
			  get_door_state_uncalib(state, intended_state);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	8c 2f       	mov	r24, r28
 3f4:	0e 94 48 00 	call	0x90	; 0x90 <get_door_state_uncalib>
		  }	  
	  }
	  
	  return state;
 3f8:	8c 2f       	mov	r24, r28
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <get_door_state+0x1d2>
 3fc:	8c 2f       	mov	r24, r28
  }
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	08 95       	ret

00000410 <door_closing>:

  uint8_t door_closing(uint16_t i_ADC_v){
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	ec 01       	movw	r28, r24
	  uint16_t i_ADC_comp = measure_current_rise(DOOR_OPEN, DOOR_OPEN);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
 41e:	bc 01       	movw	r22, r24
	  
	  /*if the decrease in current is by more than 5%, then door is likely to be closing*/
	  if (i_ADC_comp < i_ADC_v && (abs(i_ADC_comp - i_ADC_v)*100/i_ADC_comp) > 5){
 420:	8c 17       	cp	r24, r28
 422:	9d 07       	cpc	r25, r29
 424:	b0 f4       	brcc	.+44     	; 0x452 <door_closing+0x42>
		  return 1; /*door is likely to be more closed*/
 426:	8c 1b       	sub	r24, r28
 428:	9d 0b       	sbc	r25, r29
 42a:	9c 01       	movw	r18, r24
 42c:	22 f4       	brpl	.+8      	; 0x436 <door_closing+0x26>
 42e:	22 27       	eor	r18, r18
 430:	33 27       	eor	r19, r19
 432:	28 1b       	sub	r18, r24
 434:	39 0b       	sbc	r19, r25
 436:	44 e6       	ldi	r20, 0x64	; 100
 438:	42 9f       	mul	r20, r18
 43a:	c0 01       	movw	r24, r0
 43c:	43 9f       	mul	r20, r19
 43e:	90 0d       	add	r25, r0
 440:	11 24       	eor	r1, r1
 442:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	66 30       	cpi	r22, 0x06	; 6
 44a:	71 05       	cpc	r23, r1
 44c:	18 f4       	brcc	.+6      	; 0x454 <door_closing+0x44>
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	01 c0       	rjmp	.+2      	; 0x454 <door_closing+0x44>
	  }
	  else {
		  return 0;
 452:	80 e0       	ldi	r24, 0x00	; 0
	  }
  }
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <measure_current_rise>:
#include "../drivers/timer.h"
#include "../drivers/io_pins.h"

/*measure current after 4 ms after applying voltage*/

uint16_t measure_current_rise(enum door_state state, enum door_state intended_state){
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	c6 2f       	mov	r28, r22
	
	/*only start applying voltage for measuring tc when the ADC value is at 99% of steady state from max current at 20degrees (ie current is very low (2.4 A)*/
	/*should add a buffer for noise. Also amplifying */
	while (get_ADC_count() > 20){
 462:	06 c0       	rjmp	.+12     	; 0x470 <measure_current_rise+0x16>
		timer_wait(1);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>

uint16_t measure_current_rise(enum door_state state, enum door_state intended_state){
	
	/*only start applying voltage for measuring tc when the ADC value is at 99% of steady state from max current at 20degrees (ie current is very low (2.4 A)*/
	/*should add a buffer for noise. Also amplifying */
	while (get_ADC_count() > 20){
 470:	0e 94 a2 03 	call	0x744	; 0x744 <get_ADC_count>
 474:	45 97       	sbiw	r24, 0x15	; 21
 476:	b0 f7       	brcc	.-20     	; 0x464 <measure_current_rise+0xa>
		timer_wait(1);
	}
	
	switches(1, intended_state);
 478:	6c 2f       	mov	r22, r28
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
	timer_wait(4); // apply 4 ms pulse
 480:	64 e0       	ldi	r22, 0x04	; 4
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>
	uint16_t ADC_4_ms = get_ADC_count();
 48c:	0e 94 a2 03 	call	0x744	; 0x744 <get_ADC_count>
 490:	8c 01       	movw	r16, r24
	switches(0, intended_state);
 492:	6c 2f       	mov	r22, r28
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
	
	return ADC_4_ms;
}
 49a:	c8 01       	movw	r24, r16
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <voltage_PWM>:
#include "../drivers/timer.h"
#include "../drivers/io_pins.h"

#define FREQ 20

void voltage_PWM(uint8_t frequency, float duty_cycle, enum door_state direction, uint8_t ncycles){
 4a4:	4f 92       	push	r4
 4a6:	5f 92       	push	r5
 4a8:	6f 92       	push	r6
 4aa:	7f 92       	push	r7
 4ac:	8f 92       	push	r8
 4ae:	9f 92       	push	r9
 4b0:	af 92       	push	r10
 4b2:	bf 92       	push	r11
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	6a 01       	movw	r12, r20
 4c4:	7b 01       	movw	r14, r22
 4c6:	d2 2f       	mov	r29, r18

	//full cycle period in ms
	uint8_t period_ms = 1000 / frequency;

	uint8_t on_time = (uint8_t) (duty_cycle * (float)period_ms);
 4c8:	68 2f       	mov	r22, r24
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	88 ee       	ldi	r24, 0xE8	; 232
 4ce:	93 e0       	ldi	r25, 0x03	; 3
 4d0:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divmodhi4>
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
 4de:	2b 01       	movw	r4, r22
 4e0:	3c 01       	movw	r6, r24
 4e2:	a7 01       	movw	r20, r14
 4e4:	96 01       	movw	r18, r12
 4e6:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 4ea:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
 4ee:	86 2e       	mov	r8, r22
	uint8_t off_time = (uint8_t) ((1 - duty_cycle) * (float)period_ms);
 4f0:	a7 01       	movw	r20, r14
 4f2:	96 01       	movw	r18, r12
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	80 e8       	ldi	r24, 0x80	; 128
 4fa:	9f e3       	ldi	r25, 0x3F	; 63
 4fc:	0e 94 73 05 	call	0xae6	; 0xae6 <__subsf3>
 500:	a3 01       	movw	r20, r6
 502:	92 01       	movw	r18, r4
 504:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 508:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>

	for (uint8_t i=0; i < ncycles; i++){
 50c:	00 23       	and	r16, r16
 50e:	d9 f0       	breq	.+54     	; 0x546 <voltage_PWM+0xa2>
 510:	c0 e0       	ldi	r28, 0x00	; 0
		switches(1, direction);
		timer_wait(on_time);
 512:	91 2c       	mov	r9, r1
 514:	a1 2c       	mov	r10, r1
 516:	b1 2c       	mov	r11, r1
		switches(0, direction);
		timer_wait(off_time);
 518:	c6 2e       	mov	r12, r22
 51a:	d1 2c       	mov	r13, r1
 51c:	e1 2c       	mov	r14, r1
 51e:	f1 2c       	mov	r15, r1

	uint8_t on_time = (uint8_t) (duty_cycle * (float)period_ms);
	uint8_t off_time = (uint8_t) ((1 - duty_cycle) * (float)period_ms);

	for (uint8_t i=0; i < ncycles; i++){
		switches(1, direction);
 520:	6d 2f       	mov	r22, r29
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
		timer_wait(on_time);
 528:	c5 01       	movw	r24, r10
 52a:	b4 01       	movw	r22, r8
 52c:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>
		switches(0, direction);
 530:	6d 2f       	mov	r22, r29
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
		timer_wait(off_time);
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>
	uint8_t period_ms = 1000 / frequency;

	uint8_t on_time = (uint8_t) (duty_cycle * (float)period_ms);
	uint8_t off_time = (uint8_t) ((1 - duty_cycle) * (float)period_ms);

	for (uint8_t i=0; i < ncycles; i++){
 540:	cf 5f       	subi	r28, 0xFF	; 255
 542:	0c 13       	cpse	r16, r28
 544:	ed cf       	rjmp	.-38     	; 0x520 <voltage_PWM+0x7c>
		switches(1, direction);
		timer_wait(on_time);
		switches(0, direction);
		timer_wait(off_time);
	}
}
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	bf 90       	pop	r11
 556:	af 90       	pop	r10
 558:	9f 90       	pop	r9
 55a:	8f 90       	pop	r8
 55c:	7f 90       	pop	r7
 55e:	6f 90       	pop	r6
 560:	5f 90       	pop	r5
 562:	4f 90       	pop	r4
 564:	08 95       	ret

00000566 <closing_force>:

/*for door unattended*/
void closing_force(uint8_t i_ref){
 566:	3f 92       	push	r3
 568:	4f 92       	push	r4
 56a:	5f 92       	push	r5
 56c:	6f 92       	push	r6
 56e:	7f 92       	push	r7
 570:	8f 92       	push	r8
 572:	9f 92       	push	r9
 574:	af 92       	push	r10
 576:	bf 92       	push	r11
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
	float duty_cycle = 0.1;
	uint8_t cycles_per_dc = 1;
	int8_t num_dc = 5;
 588:	95 e0       	ldi	r25, 0x05	; 5
}

/*for door unattended*/
void closing_force(uint8_t i_ref){
	float duty_cycle = 0.1;
	uint8_t cycles_per_dc = 1;
 58a:	99 24       	eor	r9, r9
 58c:	93 94       	inc	r9
	}
}

/*for door unattended*/
void closing_force(uint8_t i_ref){
	float duty_cycle = 0.1;
 58e:	0f 2e       	mov	r0, r31
 590:	fd ec       	ldi	r31, 0xCD	; 205
 592:	bf 2e       	mov	r11, r31
 594:	f0 2d       	mov	r31, r0
 596:	0f 2e       	mov	r0, r31
 598:	fc ec       	ldi	r31, 0xCC	; 204
 59a:	cf 2e       	mov	r12, r31
 59c:	f0 2d       	mov	r31, r0
 59e:	0f 2e       	mov	r0, r31
 5a0:	fc ec       	ldi	r31, 0xCC	; 204
 5a2:	df 2e       	mov	r13, r31
 5a4:	f0 2d       	mov	r31, r0
 5a6:	1d e3       	ldi	r17, 0x3D	; 61
		for (uint8_t j=0; j < num_dc; j++){
			voltage_PWM(FREQ, duty_cycle, DOOR_CLOSED, cycles_per_dc);
			duty_cycle += 0.2;
			uint8_t i_current = measure_current_rise(DOOR_OPEN,DOOR_CLOSED);
		
			if (i_ref - i_current > 0 && (((abs(i_ref - i_current)*100) / i_ref) > 2)){
 5a8:	c8 2f       	mov	r28, r24
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
 5ac:	0f 2e       	mov	r0, r31
 5ae:	f4 e6       	ldi	r31, 0x64	; 100
 5b0:	8f 2e       	mov	r8, r31
 5b2:	f0 2d       	mov	r31, r0
				voltage_PWM(FREQ, duty_cycle - 0.2, DOOR_CLOSED, cycles_per_dc);
				return;
			}
		
		}
		duty_cycle = 0.5;
 5b4:	51 2c       	mov	r5, r1
 5b6:	41 2c       	mov	r4, r1
 5b8:	31 2c       	mov	r3, r1
 5ba:	0f 2e       	mov	r0, r31
 5bc:	ff e3       	ldi	r31, 0x3F	; 63
 5be:	7f 2e       	mov	r7, r31
 5c0:	f0 2d       	mov	r31, r0
		num_dc = 3;
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f3 e0       	ldi	r31, 0x03	; 3
 5c6:	6f 2e       	mov	r6, r31
 5c8:	f0 2d       	mov	r31, r0
 5ca:	55 c0       	rjmp	.+170    	; 0x676 <closing_force+0x110>
	int8_t num_dc = 5;
	
	for (uint8_t i=0; i < 3; i++){
	
		for (uint8_t j=0; j < num_dc; j++){
			voltage_PWM(FREQ, duty_cycle, DOOR_CLOSED, cycles_per_dc);
 5cc:	09 2d       	mov	r16, r9
 5ce:	21 e0       	ldi	r18, 0x01	; 1
 5d0:	4b 2d       	mov	r20, r11
 5d2:	5c 2d       	mov	r21, r12
 5d4:	6d 2d       	mov	r22, r13
 5d6:	71 2f       	mov	r23, r17
 5d8:	84 e1       	ldi	r24, 0x14	; 20
 5da:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
			duty_cycle += 0.2;
 5de:	2d ec       	ldi	r18, 0xCD	; 205
 5e0:	3c ec       	ldi	r19, 0xCC	; 204
 5e2:	4c e4       	ldi	r20, 0x4C	; 76
 5e4:	5e e3       	ldi	r21, 0x3E	; 62
 5e6:	6b 2d       	mov	r22, r11
 5e8:	7c 2d       	mov	r23, r12
 5ea:	8d 2d       	mov	r24, r13
 5ec:	91 2f       	mov	r25, r17
 5ee:	0e 94 74 05 	call	0xae8	; 0xae8 <__addsf3>
 5f2:	b6 2e       	mov	r11, r22
 5f4:	c7 2e       	mov	r12, r23
 5f6:	d8 2e       	mov	r13, r24
 5f8:	19 2f       	mov	r17, r25
			uint8_t i_current = measure_current_rise(DOOR_OPEN,DOOR_CLOSED);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
		
			if (i_ref - i_current > 0 && (((abs(i_ref - i_current)*100) / i_ref) > 2)){
 602:	9e 01       	movw	r18, r28
 604:	28 1b       	sub	r18, r24
 606:	31 09       	sbc	r19, r1
 608:	c9 01       	movw	r24, r18
 60a:	18 16       	cp	r1, r24
 60c:	19 06       	cpc	r1, r25
 60e:	1c f5       	brge	.+70     	; 0x656 <closing_force+0xf0>
 610:	33 23       	and	r19, r19
 612:	24 f4       	brge	.+8      	; 0x61c <closing_force+0xb6>
 614:	22 27       	eor	r18, r18
 616:	33 27       	eor	r19, r19
 618:	28 1b       	sub	r18, r24
 61a:	39 0b       	sbc	r19, r25
 61c:	82 9e       	mul	r8, r18
 61e:	c0 01       	movw	r24, r0
 620:	83 9e       	mul	r8, r19
 622:	90 0d       	add	r25, r0
 624:	11 24       	eor	r1, r1
 626:	be 01       	movw	r22, r28
 628:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divmodhi4>
 62c:	63 30       	cpi	r22, 0x03	; 3
 62e:	71 05       	cpc	r23, r1
 630:	94 f0       	brlt	.+36     	; 0x656 <closing_force+0xf0>
				/*door has moved and become more closed*/
			
				/*finish closing it by giving it a PWM just less than the one before*/
				voltage_PWM(FREQ, duty_cycle - 0.2, DOOR_CLOSED, cycles_per_dc);
 632:	2d ec       	ldi	r18, 0xCD	; 205
 634:	3c ec       	ldi	r19, 0xCC	; 204
 636:	4c e4       	ldi	r20, 0x4C	; 76
 638:	5e e3       	ldi	r21, 0x3E	; 62
 63a:	6b 2d       	mov	r22, r11
 63c:	7c 2d       	mov	r23, r12
 63e:	8d 2d       	mov	r24, r13
 640:	91 2f       	mov	r25, r17
 642:	0e 94 73 05 	call	0xae6	; 0xae6 <__subsf3>
 646:	ab 01       	movw	r20, r22
 648:	bc 01       	movw	r22, r24
 64a:	09 2d       	mov	r16, r9
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	84 e1       	ldi	r24, 0x14	; 20
 650:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
				return;
 654:	15 c0       	rjmp	.+42     	; 0x680 <closing_force+0x11a>
	uint8_t cycles_per_dc = 1;
	int8_t num_dc = 5;
	
	for (uint8_t i=0; i < 3; i++){
	
		for (uint8_t j=0; j < num_dc; j++){
 656:	a3 94       	inc	r10
 658:	8a 2d       	mov	r24, r10
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	8e 15       	cp	r24, r14
 65e:	9f 05       	cpc	r25, r15
 660:	0c f4       	brge	.+2      	; 0x664 <closing_force+0xfe>
 662:	b4 cf       	rjmp	.-152    	; 0x5cc <closing_force+0x66>
			}
		
		}
		duty_cycle = 0.5;
		num_dc = 3;
		cycles_per_dc++;
 664:	93 94       	inc	r9
				voltage_PWM(FREQ, duty_cycle - 0.2, DOOR_CLOSED, cycles_per_dc);
				return;
			}
		
		}
		duty_cycle = 0.5;
 666:	b5 2c       	mov	r11, r5
 668:	c4 2c       	mov	r12, r4
 66a:	d3 2c       	mov	r13, r3
 66c:	17 2d       	mov	r17, r7
		num_dc = 3;
 66e:	96 2d       	mov	r25, r6
void closing_force(uint8_t i_ref){
	float duty_cycle = 0.1;
	uint8_t cycles_per_dc = 1;
	int8_t num_dc = 5;
	
	for (uint8_t i=0; i < 3; i++){
 670:	34 e0       	ldi	r19, 0x04	; 4
 672:	93 16       	cp	r9, r19
 674:	29 f0       	breq	.+10     	; 0x680 <closing_force+0x11a>
	
		for (uint8_t j=0; j < num_dc; j++){
 676:	e9 2e       	mov	r14, r25
 678:	99 0f       	add	r25, r25
 67a:	ff 08       	sbc	r15, r15
 67c:	a1 2c       	mov	r10, r1
 67e:	a6 cf       	rjmp	.-180    	; 0x5cc <closing_force+0x66>
		duty_cycle = 0.5;
		num_dc = 3;
		cycles_per_dc++;
		
	}
}
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	bf 90       	pop	r11
 692:	af 90       	pop	r10
 694:	9f 90       	pop	r9
 696:	8f 90       	pop	r8
 698:	7f 90       	pop	r7
 69a:	6f 90       	pop	r6
 69c:	5f 90       	pop	r5
 69e:	4f 90       	pop	r4
 6a0:	3f 90       	pop	r3
 6a2:	08 95       	ret

000006a4 <opening_force>:

void opening_force(){
 6a4:	0f 93       	push	r16
	voltage_PWM(FREQ, 0.1, DOOR_OPEN, 1);
 6a6:	01 e0       	ldi	r16, 0x01	; 1
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	4d ec       	ldi	r20, 0xCD	; 205
 6ac:	5c ec       	ldi	r21, 0xCC	; 204
 6ae:	6c ec       	ldi	r22, 0xCC	; 204
 6b0:	7d e3       	ldi	r23, 0x3D	; 61
 6b2:	84 e1       	ldi	r24, 0x14	; 20
 6b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	voltage_PWM(FREQ, 0.3, DOOR_OPEN, 1);
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	4a e9       	ldi	r20, 0x9A	; 154
 6bc:	59 e9       	ldi	r21, 0x99	; 153
 6be:	69 e9       	ldi	r22, 0x99	; 153
 6c0:	7e e3       	ldi	r23, 0x3E	; 62
 6c2:	84 e1       	ldi	r24, 0x14	; 20
 6c4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	voltage_PWM(FREQ, 0.5, DOOR_OPEN, 1);
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	7f e3       	ldi	r23, 0x3F	; 63
 6d2:	84 e1       	ldi	r24, 0x14	; 20
 6d4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	voltage_PWM(FREQ, 0.7, DOOR_OPEN, 1);
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	43 e3       	ldi	r20, 0x33	; 51
 6dc:	53 e3       	ldi	r21, 0x33	; 51
 6de:	63 e3       	ldi	r22, 0x33	; 51
 6e0:	7f e3       	ldi	r23, 0x3F	; 63
 6e2:	84 e1       	ldi	r24, 0x14	; 20
 6e4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	voltage_PWM(FREQ, 0.9, DOOR_OPEN, 1);
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	46 e6       	ldi	r20, 0x66	; 102
 6ec:	56 e6       	ldi	r21, 0x66	; 102
 6ee:	66 e6       	ldi	r22, 0x66	; 102
 6f0:	7f e3       	ldi	r23, 0x3F	; 63
 6f2:	84 e1       	ldi	r24, 0x14	; 20
 6f4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	/*
	Opening sequence: 250 ms
    Could change this if it doesn't work, just a first guess
	*/
}
 6f8:	0f 91       	pop	r16
 6fa:	08 95       	ret

000006fc <hp_opening_force>:

/*higher power opening force, if first opening force does not close sufficiently*/
void hp_opening_force(){
 6fc:	0f 93       	push	r16
	voltage_PWM(FREQ, 0.5, DOOR_OPEN, 2);
 6fe:	02 e0       	ldi	r16, 0x02	; 2
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	40 e0       	ldi	r20, 0x00	; 0
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	7f e3       	ldi	r23, 0x3F	; 63
 70a:	84 e1       	ldi	r24, 0x14	; 20
 70c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	voltage_PWM(FREQ, 0.7, DOOR_OPEN, 2);
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	43 e3       	ldi	r20, 0x33	; 51
 714:	53 e3       	ldi	r21, 0x33	; 51
 716:	63 e3       	ldi	r22, 0x33	; 51
 718:	7f e3       	ldi	r23, 0x3F	; 63
 71a:	84 e1       	ldi	r24, 0x14	; 20
 71c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	voltage_PWM(FREQ, 0.9, DOOR_OPEN, 2);
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	46 e6       	ldi	r20, 0x66	; 102
 724:	56 e6       	ldi	r21, 0x66	; 102
 726:	66 e6       	ldi	r22, 0x66	; 102
 728:	7f e3       	ldi	r23, 0x3F	; 63
 72a:	84 e1       	ldi	r24, 0x14	; 20
 72c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <voltage_PWM>
	/*
	sequence: 300 ms
	*/
}
 730:	0f 91       	pop	r16
 732:	08 95       	ret

00000734 <ADC_init>:
#include "adc.h"

void ADC_init(){

	/* Use Pin C0 as ADC input*/
	DDRC &= ~(1<<0); // Set PC0 to be an input pin
 734:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<0); // Enable the pull-up Resistor for PC0
 736:	40 9a       	sbi	0x08, 0	; 8

	/*Ensure lower 4 bits are disabled to select ADC0 pin*/
	ADMUX &= 0xF0;
 738:	ec e7       	ldi	r30, 0x7C	; 124
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	80 7f       	andi	r24, 0xF0	; 240
 740:	80 83       	st	Z, r24
 742:	08 95       	ret

00000744 <get_ADC_count>:
}

uint16_t get_ADC_count (){
	// Use this function when voltage goes to 0.

	ADCSRA |= (1 << ADEN); /*enables ADC*/
 744:	ea e7       	ldi	r30, 0x7A	; 122
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	80 68       	ori	r24, 0x80	; 128
 74c:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC); /* start conversion*/
 74e:	80 81       	ld	r24, Z
 750:	80 64       	ori	r24, 0x40	; 64
 752:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADIF) ==0){;}; /*wait for the ADC to convert value*/
 754:	80 81       	ld	r24, Z

	uint16_t ADC_value = ADCL | (ADCH<<8); /*ADC value is split in two registers so we combine them together*/
 756:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 75a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	ADCSRA &= ~(1 << ADEN); /*disable ADC when done*/
 75e:	90 81       	ld	r25, Z
 760:	9f 77       	andi	r25, 0x7F	; 127
 762:	90 83       	st	Z, r25

	return ADC_value;
 764:	90 e0       	ldi	r25, 0x00	; 0
}
 766:	92 2b       	or	r25, r18
 768:	08 95       	ret

0000076a <current_driver_pins_init>:
#include "io_pins.h"

volatile uint8_t touched = 0;

void current_driver_pins_init(){
	DDRB |= (1 << 0); /*Output pins for current driver. PB0 is opening direction*/
 76a:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << 1);
 76c:	21 9a       	sbi	0x04, 1	; 4
 76e:	08 95       	ret

00000770 <sensor_pins_init>:
}

void sensor_pins_init(){
	// Set up input pin
	DDRD &= ~(1<<2); // Set pin 2 to be an input pin on D.
 770:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<2); // Enable the pull-up Resistor for PD2
 772:	5a 9a       	sbi	0x0b, 2	; 11
 774:	08 95       	ret

00000776 <led_pins_init>:
}

void led_pins_init(){
	DDRB |= (1<<3); // led PIN
 776:	23 9a       	sbi	0x04, 3	; 4
 778:	08 95       	ret

0000077a <set_touch_interrupt>:
}

void set_touch_interrupt(){
	//enable interrupt for touch sensor
	EICRA |= (1 << ISC00);
 77a:	e9 e6       	ldi	r30, 0x69	; 105
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	81 60       	ori	r24, 0x01	; 1
 782:	80 83       	st	Z, r24
	EICRA |= (1 << ISC01);
 784:	80 81       	ld	r24, Z
 786:	82 60       	ori	r24, 0x02	; 2
 788:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0);
 78a:	e8 9a       	sbi	0x1d, 0	; 29
 78c:	08 95       	ret

0000078e <clear_touch_interrupt>:
}

void clear_touch_interrupt(){
	EIMSK &= (1 << INT0);
 78e:	8d b3       	in	r24, 0x1d	; 29
 790:	81 70       	andi	r24, 0x01	; 1
 792:	8d bb       	out	0x1d, r24	; 29
 794:	08 95       	ret

00000796 <set_LED>:
}

void set_LED(uint8_t state){
	//** If the state variable is 1 that means door is open, turn on LED **//

	if (state){
 796:	88 23       	and	r24, r24
 798:	11 f0       	breq	.+4      	; 0x79e <set_LED+0x8>
		// turn on the LEd
		PORTB |= (1<<PB3); // set led
 79a:	2b 9a       	sbi	0x05, 3	; 5
 79c:	08 95       	ret
	}
	else{
		PORTB &= ~(1 << PB3); //clear
 79e:	2b 98       	cbi	0x05, 3	; 5
 7a0:	08 95       	ret

000007a2 <switches>:
	}
}

void switches(uint8_t on,enum door_state state){
  if (!on){
 7a2:	81 11       	cpse	r24, r1
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <switches+0xa>
    PORTB &= ~(1 << PB1);
 7a6:	29 98       	cbi	0x05, 1	; 5
    PORTB &= ~(1 << PB0);
 7a8:	28 98       	cbi	0x05, 0	; 5
 7aa:	08 95       	ret
  }
  else {
    /* if current state is door open, then apply opening current, as it will not change the state*/
    if (state == DOOR_OPEN){
 7ac:	61 11       	cpse	r22, r1
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <switches+0x12>
      PORTB |= (1 << PB0);
 7b0:	28 9a       	sbi	0x05, 0	; 5
 7b2:	08 95       	ret
    }
    else {
      PORTB |= (1 << PB1);
 7b4:	29 9a       	sbi	0x05, 1	; 5
 7b6:	08 95       	ret

000007b8 <__vector_1>:
    }
  }
}

ISR(INT0_vect){
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	8f 93       	push	r24
	touched = 1;
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <touched>
}
 7ca:	8f 91       	pop	r24
 7cc:	0f 90       	pop	r0
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	0f 90       	pop	r0
 7d2:	1f 90       	pop	r1
 7d4:	18 95       	reti

000007d6 <timer_0_PWM_init>:
	TCCR2B &= ~(1 << WGM22);
	
	/*64 prescaler*/
	TCCR2B |= (1 << CS22);
	TCCR2B |= (1 << CS21);
	TCCR2B &= ~(1 << CS20);
 7d6:	82 e0       	ldi	r24, 0x02	; 2
 7d8:	84 bd       	out	0x24, r24	; 36
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	85 bd       	out	0x25, r24	; 37
 7de:	8d e7       	ldi	r24, 0x7D	; 125
 7e0:	87 bd       	out	0x27, r24	; 39
 7e2:	08 95       	ret

000007e4 <timer_2_init>:
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 7ea:	84 e0       	ldi	r24, 0x04	; 4
 7ec:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 7f0:	8a ef       	ldi	r24, 0xFA	; 250
 7f2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 7f6:	08 95       	ret

000007f8 <set_door_unattended_and_led_interrupt>:
 7f8:	e0 e7       	ldi	r30, 0x70	; 112
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	84 60       	ori	r24, 0x04	; 4
 800:	80 83       	st	Z, r24
 802:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_count_unattended+0x1>
 806:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer_count_unattended>
 80a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 80e:	08 95       	ret

00000810 <clear_door_open_interrupt>:
 810:	ee e6       	ldi	r30, 0x6E	; 110
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	8d 7f       	andi	r24, 0xFD	; 253
 818:	80 83       	st	Z, r24
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
 822:	08 95       	ret

00000824 <clear_door_unattended_interrupt>:
 824:	e0 e7       	ldi	r30, 0x70	; 112
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8b 7f       	andi	r24, 0xFB	; 251
 82c:	80 83       	st	Z, r24
 82e:	08 95       	ret

00000830 <WDT_init>:
}


void WDT_init(){
	/*Need to make sure WDTON fuse is programmed*/
	WDTCSR |= (1 << WDCE| 1 << WDE);
 830:	e0 e6       	ldi	r30, 0x60	; 96
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	88 61       	ori	r24, 0x18	; 24
 838:	80 83       	st	Z, r24
	
	WDTCSR |= (1 << WDP2) | (1 <<WDP1); //1 s timing
 83a:	80 81       	ld	r24, Z
 83c:	86 60       	ori	r24, 0x06	; 6
 83e:	80 83       	st	Z, r24
	WDTCSR &= ~(1 << WDE); //interrupt mode
 840:	80 81       	ld	r24, Z
 842:	87 7f       	andi	r24, 0xF7	; 247
 844:	80 83       	st	Z, r24
 846:	08 95       	ret

00000848 <enable_WDT_interrupt>:
}

void enable_WDT_interrupt(){
	/*Interrupt Enable*/
	WDTCSR |= (1 << WDIE);
 848:	e0 e6       	ldi	r30, 0x60	; 96
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	80 64       	ori	r24, 0x40	; 64
 850:	80 83       	st	Z, r24
 852:	08 95       	ret

00000854 <disable_WDT_interrupt>:
}

void disable_WDT_interrupt(){
	WDTCSR &= ~(1 << WDIE);
 854:	e0 e6       	ldi	r30, 0x60	; 96
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	8f 7b       	andi	r24, 0xBF	; 191
 85c:	80 83       	st	Z, r24
 85e:	08 95       	ret

00000860 <timer_wait>:
}

void timer_wait(uint32_t milliseconds){
 860:	ab 01       	movw	r20, r22
 862:	bc 01       	movw	r22, r24
	uint32_t timer_overflows = 0;

	//Reset Count
	TCNT0 = 0;
 864:	16 bc       	out	0x26, r1	; 38
void disable_WDT_interrupt(){
	WDTCSR &= ~(1 << WDIE);
}

void timer_wait(uint32_t milliseconds){
	uint32_t timer_overflows = 0;
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	dc 01       	movw	r26, r24

	//Reset Count
	TCNT0 = 0;

	while(timer_overflows < milliseconds){
 86c:	0c c0       	rjmp	.+24     	; 0x886 <timer_wait+0x26>

		/*check whether Output Compare A match flag is set in Timer interrupt Flag register*/
		if(TIFR0 & (1 << OCF0A)){
 86e:	a9 99       	sbic	0x15, 1	; 21
 870:	06 c0       	rjmp	.+12     	; 0x87e <timer_wait+0x1e>
	uint32_t timer_overflows = 0;

	//Reset Count
	TCNT0 = 0;

	while(timer_overflows < milliseconds){
 872:	84 17       	cp	r24, r20
 874:	95 07       	cpc	r25, r21
 876:	a6 07       	cpc	r26, r22
 878:	b7 07       	cpc	r27, r23
 87a:	c8 f3       	brcs	.-14     	; 0x86e <timer_wait+0xe>
 87c:	08 95       	ret

		/*check whether Output Compare A match flag is set in Timer interrupt Flag register*/
		if(TIFR0 & (1 << OCF0A)){
			timer_overflows++;
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	a1 1d       	adc	r26, r1
 882:	b1 1d       	adc	r27, r1

			//Clear OCF0A in TIFR0 register by writing 1 to it
			TIFR0 |= (1 << OCF0A);
 884:	a9 9a       	sbi	0x15, 1	; 21
	uint32_t timer_overflows = 0;

	//Reset Count
	TCNT0 = 0;

	while(timer_overflows < milliseconds){
 886:	48 17       	cp	r20, r24
 888:	59 07       	cpc	r21, r25
 88a:	6a 07       	cpc	r22, r26
 88c:	7b 07       	cpc	r23, r27
 88e:	19 f0       	breq	.+6      	; 0x896 <timer_wait+0x36>

		/*check whether Output Compare A match flag is set in Timer interrupt Flag register*/
		if(TIFR0 & (1 << OCF0A)){
 890:	a9 9b       	sbis	0x15, 1	; 21
 892:	ed cf       	rjmp	.-38     	; 0x86e <timer_wait+0xe>
 894:	f4 cf       	rjmp	.-24     	; 0x87e <timer_wait+0x1e>
 896:	08 95       	ret

00000898 <__vector_6>:
		}
	}
}

/*Watchdog timer (for sending to sleep)*/
ISR(WDT_vect){
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
	;
}
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <__vector_14>:

/* interrupt to provide 10% duty cycle when door is open*/
ISR(TIMER0_COMPA_vect){
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	11 24       	eor	r1, r1
 8b6:	2f 93       	push	r18
 8b8:	3f 93       	push	r19
 8ba:	4f 93       	push	r20
 8bc:	5f 93       	push	r21
 8be:	6f 93       	push	r22
 8c0:	7f 93       	push	r23
 8c2:	8f 93       	push	r24
 8c4:	9f 93       	push	r25
 8c6:	af 93       	push	r26
 8c8:	bf 93       	push	r27
 8ca:	ef 93       	push	r30
 8cc:	ff 93       	push	r31
	timer_count_open_PWM++;
 8ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_count_open_PWM>
 8d2:	8f 5f       	subi	r24, 0xFF	; 255
 8d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer_count_open_PWM>
	
	if (PWM_state_high && timer_count_open_PWM == DUTY_CYCLE_10_ON_T){
 8d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWM_state_high>
 8dc:	88 23       	and	r24, r24
 8de:	69 f0       	breq	.+26     	; 0x8fa <__vector_14+0x4e>
 8e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_count_open_PWM>
 8e4:	85 30       	cpi	r24, 0x05	; 5
 8e6:	49 f4       	brne	.+18     	; 0x8fa <__vector_14+0x4e>
		switches(0, DOOR_OPEN);
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
		timer_count_open_PWM = 0;
 8f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_count_open_PWM>
		PWM_state_high = 0;
 8f4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <PWM_state_high>
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <__stack+0x1d>
	}
	
	else if (!PWM_state_high && timer_count_open_PWM == DUTY_CYCLE_10_OFF_T){
 8fa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PWM_state_high>
 8fe:	81 11       	cpse	r24, r1
 900:	0d c0       	rjmp	.+26     	; 0x91c <__stack+0x1d>
 902:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_count_open_PWM>
 906:	8d 32       	cpi	r24, 0x2D	; 45
 908:	49 f4       	brne	.+18     	; 0x91c <__stack+0x1d>
		switches(1, DOOR_OPEN);
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
		timer_count_open_PWM = 0;
 912:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_count_open_PWM>
		PWM_state_high = 1;
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <PWM_state_high>
	}
}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <__vector_7>:

/*measure time door left open*/
/*flashing LED timer*/
ISR(TIMER2_COMPA_vect){
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	8f 93       	push	r24
 94c:	9f 93       	push	r25
	timer_count_unattended++;
 94e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer_count_unattended>
 952:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer_count_unattended+0x1>
 956:	01 96       	adiw	r24, 0x01	; 1
 958:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer_count_unattended+0x1>
 95c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer_count_unattended>
	timer_count_led++;
 960:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_count_led>
 964:	8f 5f       	subi	r24, 0xFF	; 255
 966:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_count_led>

	if (timer_count_unattended == BLINK_LIGHT_TIME){
 96a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer_count_unattended>
 96e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer_count_unattended+0x1>
 972:	84 3f       	cpi	r24, 0xF4	; 244
 974:	91 40       	sbci	r25, 0x01	; 1
 976:	41 f4       	brne	.+16     	; 0x988 <__vector_7+0x4a>
		PORTB ^= (1 << PB4); /*toggle red led*/
 978:	95 b1       	in	r25, 0x05	; 5
 97a:	80 e1       	ldi	r24, 0x10	; 16
 97c:	89 27       	eor	r24, r25
 97e:	85 b9       	out	0x05, r24	; 5
		timer_count_unattended = 0;
 980:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_count_unattended+0x1>
 984:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer_count_unattended>
	}
	
	if (timer_count_led == DOOR_UNATTENDED_TIME){
 988:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_count_led>
		door_unattended = 1;
	}
}
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <FSM_tick>:
  OPEN,
  CLOSED
};


void FSM_tick(){
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
  static enum state current_state = START;

  switch(current_state){
 9a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_state.1657>
 9a4:	81 30       	cpi	r24, 0x01	; 1
 9a6:	a9 f0       	breq	.+42     	; 0x9d2 <FSM_tick+0x36>
 9a8:	30 f0       	brcs	.+12     	; 0x9b6 <FSM_tick+0x1a>
 9aa:	82 30       	cpi	r24, 0x02	; 2
 9ac:	09 f1       	breq	.+66     	; 0x9f0 <FSM_tick+0x54>
 9ae:	83 30       	cpi	r24, 0x03	; 3
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <FSM_tick+0x18>
 9b2:	56 c0       	rjmp	.+172    	; 0xa60 <FSM_tick+0xc4>
 9b4:	82 c0       	rjmp	.+260    	; 0xaba <FSM_tick+0x11e>
		switch(1, DOOR_CLOSED);
		timer_wait(1000);
		switch(0, DOOR_CLOSED);
		*/
		
		if (get_door_state(UNKNOWN, UNKNOWN) == DOOR_OPEN){
 9b6:	62 e0       	ldi	r22, 0x02	; 2
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	0e 94 16 01 	call	0x22c	; 0x22c <get_door_state>
 9be:	81 11       	cpse	r24, r1
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <FSM_tick+0x2e>
			current_state = OPEN;
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
 9c8:	7a c0       	rjmp	.+244    	; 0xabe <FSM_tick+0x122>
		}
		else {
			current_state = CLOSED;
 9ca:	83 e0       	ldi	r24, 0x03	; 3
 9cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
 9d0:	76 c0       	rjmp	.+236    	; 0xabe <FSM_tick+0x122>
		}
		break;

    case OPENING:
      opening_force();
 9d2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <opening_force>

      if (get_door_state(DOOR_OPEN, DOOR_OPEN) == DOOR_OPEN){
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	0e 94 16 01 	call	0x22c	; 0x22c <get_door_state>
 9de:	81 11       	cpse	r24, r1
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <FSM_tick+0x4e>
        current_state = OPEN;
 9e2:	82 e0       	ldi	r24, 0x02	; 2
 9e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
 9e8:	6a c0       	rjmp	.+212    	; 0xabe <FSM_tick+0x122>
      }
      else {
        /*do alternative attempt to open door*/
		hp_opening_force();
 9ea:	0e 94 7e 03 	call	0x6fc	; 0x6fc <hp_opening_force>
 9ee:	67 c0       	rjmp	.+206    	; 0xabe <FSM_tick+0x122>
      }

      break;

    case OPEN:
		sei();
 9f0:	78 94       	sei
		set_door_unattended_and_led_interrupt(); /*function should enable timer that starts counting to 30s (via ISR) and then set the state to door closing*/
 9f2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <set_door_unattended_and_led_interrupt>

		door_unattended = 0; /*reset flag*/
 9f6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <door_unattended>
	  
		uint16_t i_value = measure_current_rise(DOOR_OPEN, DOOR_OPEN);
 9fa:	60 e0       	ldi	r22, 0x00	; 0
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	0e 94 2d 02 	call	0x45a	; 0x45a <measure_current_rise>
 a02:	ec 01       	movw	r28, r24

		while (1)
		{
			if (get_door_state(DOOR_OPEN, DOOR_OPEN) == DOOR_CLOSED){
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	0e 94 16 01 	call	0x22c	; 0x22c <get_door_state>
 a0c:	81 30       	cpi	r24, 0x01	; 1
 a0e:	49 f4       	brne	.+18     	; 0xa22 <FSM_tick+0x86>
			current_state = CLOSED;
 a10:	83 e0       	ldi	r24, 0x03	; 3
 a12:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
			door_unattended = 0;
 a16:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <door_unattended>
			set_door_open_interrupt();
			timer_wait(50);
			clear_door_open_interrupt();
			*/
		}
		clear_door_open_interrupt(); 
 a1a:	0e 94 08 04 	call	0x810	; 0x810 <clear_door_open_interrupt>
		cli();
 a1e:	f8 94       	cli
		break;
 a20:	4e c0       	rjmp	.+156    	; 0xabe <FSM_tick+0x122>
			current_state = CLOSED;
			door_unattended = 0;
			break;
			}
		
			if (door_closing(i_value)){
 a22:	ce 01       	movw	r24, r28
 a24:	0e 94 08 02 	call	0x410	; 0x410 <door_closing>
 a28:	88 23       	and	r24, r24
 a2a:	89 f0       	breq	.+34     	; 0xa4e <FSM_tick+0xb2>
			 //breaking force
				switches(1, DOOR_OPEN);
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
				timer_wait(5); //10%
 a34:	65 e0       	ldi	r22, 0x05	; 5
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 30 04 	call	0x860	; 0x860 <timer_wait>
				switches(0, DOOR_OPEN);
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <switches>
				closing_force(); //then finish closing the door
 a48:	0e 94 b3 02 	call	0x566	; 0x566 <closing_force>
 a4c:	db cf       	rjmp	.-74     	; 0xa04 <FSM_tick+0x68>
			}
		
			else if (door_unattended ){
 a4e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <door_unattended>
 a52:	88 23       	and	r24, r24
 a54:	b9 f2       	breq	.-82     	; 0xa04 <FSM_tick+0x68>
				closing_force();
 a56:	0e 94 b3 02 	call	0x566	; 0x566 <closing_force>
				clear_door_unattended_interrupt();
 a5a:	0e 94 12 04 	call	0x824	; 0x824 <clear_door_unattended_interrupt>
 a5e:	d2 cf       	rjmp	.-92     	; 0xa04 <FSM_tick+0x68>
		clear_door_open_interrupt(); 
		cli();
		break;

    case CLOSED:
      set_LED(DOOR_CLOSED);
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	0e 94 cb 03 	call	0x796	; 0x796 <set_LED>
	  set_touch_interrupt();	  
 a66:	0e 94 bd 03 	call	0x77a	; 0x77a <set_touch_interrupt>

      while (1)
      {
        if (get_door_state(DOOR_CLOSED, DOOR_CLOSED) == DOOR_OPEN){
 a6a:	61 e0       	ldi	r22, 0x01	; 1
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	0e 94 16 01 	call	0x22c	; 0x22c <get_door_state>
 a72:	81 11       	cpse	r24, r1
 a74:	04 c0       	rjmp	.+8      	; 0xa7e <FSM_tick+0xe2>
          current_state = OPEN;
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
          break;
 a7c:	19 c0       	rjmp	.+50     	; 0xab0 <FSM_tick+0x114>
        }
		
		if (touched){
 a7e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <touched>
 a82:	88 23       	and	r24, r24
 a84:	31 f0       	breq	.+12     	; 0xa92 <FSM_tick+0xf6>
			touched = 0;
 a86:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <touched>
			current_state = OPENING;
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_state.1657>
			break;
 a90:	0f c0       	rjmp	.+30     	; 0xab0 <FSM_tick+0x114>
		}
		
		/*sleep for 1s by going to power down mode*/
		enable_WDT_interrupt();
 a92:	0e 94 24 04 	call	0x848	; 0x848 <enable_WDT_interrupt>
		SMCR |= (1 << SM1);//power down sleep mode
 a96:	83 b7       	in	r24, 0x33	; 51
 a98:	84 60       	ori	r24, 0x04	; 4
 a9a:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 a9c:	83 b7       	in	r24, 0x33	; 51
 a9e:	81 60       	ori	r24, 0x01	; 1
 aa0:	83 bf       	out	0x33, r24	; 51
		sei();
 aa2:	78 94       	sei
		sleep_cpu();
 aa4:	88 95       	sleep
		sleep_disable();
 aa6:	83 b7       	in	r24, 0x33	; 51
 aa8:	8e 7f       	andi	r24, 0xFE	; 254
 aaa:	83 bf       	out	0x33, r24	; 51
		cli();
 aac:	f8 94       	cli
		

      }
 aae:	dd cf       	rjmp	.-70     	; 0xa6a <FSM_tick+0xce>
	  disable_WDT_interrupt();
 ab0:	0e 94 2a 04 	call	0x854	; 0x854 <disable_WDT_interrupt>
	  clear_touch_interrupt();
 ab4:	0e 94 c7 03 	call	0x78e	; 0x78e <clear_touch_interrupt>
      break;
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <FSM_tick+0x122>

    default:
      current_state = START;
 aba:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <current_state.1657>
      break;
  }
}
 abe:	df 91       	pop	r29
 ac0:	cf 91       	pop	r28
 ac2:	08 95       	ret

00000ac4 <main>:

#define CURRENT_MEAS_DELAY_MS 4

int main(void)
{
	current_driver_pins_init();
 ac4:	0e 94 b5 03 	call	0x76a	; 0x76a <current_driver_pins_init>
	sensor_pins_init();
 ac8:	0e 94 b8 03 	call	0x770	; 0x770 <sensor_pins_init>
	led_pins_init();
 acc:	0e 94 bb 03 	call	0x776	; 0x776 <led_pins_init>
	ADC_init();
 ad0:	0e 94 9a 03 	call	0x734	; 0x734 <ADC_init>
	timer_0_PWM_init();
 ad4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <timer_0_PWM_init>
	timer_2_init();
 ad8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <timer_2_init>
	WDT_init();
 adc:	0e 94 18 04 	call	0x830	; 0x830 <WDT_init>

  while (1)
  {
	  FSM_tick();
 ae0:	0e 94 ce 04 	call	0x99c	; 0x99c <FSM_tick>
 ae4:	fd cf       	rjmp	.-6      	; 0xae0 <main+0x1c>

00000ae6 <__subsf3>:
 ae6:	50 58       	subi	r21, 0x80	; 128

00000ae8 <__addsf3>:
 ae8:	bb 27       	eor	r27, r27
 aea:	aa 27       	eor	r26, r26
 aec:	0e 94 8b 05 	call	0xb16	; 0xb16 <__addsf3x>
 af0:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
 af4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
 af8:	38 f0       	brcs	.+14     	; 0xb08 <__addsf3+0x20>
 afa:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
 afe:	20 f0       	brcs	.+8      	; 0xb08 <__addsf3+0x20>
 b00:	39 f4       	brne	.+14     	; 0xb10 <__addsf3+0x28>
 b02:	9f 3f       	cpi	r25, 0xFF	; 255
 b04:	19 f4       	brne	.+6      	; 0xb0c <__addsf3+0x24>
 b06:	26 f4       	brtc	.+8      	; 0xb10 <__addsf3+0x28>
 b08:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
 b0c:	0e f4       	brtc	.+2      	; 0xb10 <__addsf3+0x28>
 b0e:	e0 95       	com	r30
 b10:	e7 fb       	bst	r30, 7
 b12:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>

00000b16 <__addsf3x>:
 b16:	e9 2f       	mov	r30, r25
 b18:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
 b1c:	58 f3       	brcs	.-42     	; 0xaf4 <__addsf3+0xc>
 b1e:	ba 17       	cp	r27, r26
 b20:	62 07       	cpc	r22, r18
 b22:	73 07       	cpc	r23, r19
 b24:	84 07       	cpc	r24, r20
 b26:	95 07       	cpc	r25, r21
 b28:	20 f0       	brcs	.+8      	; 0xb32 <__addsf3x+0x1c>
 b2a:	79 f4       	brne	.+30     	; 0xb4a <__addsf3x+0x34>
 b2c:	a6 f5       	brtc	.+104    	; 0xb96 <__addsf3x+0x80>
 b2e:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
 b32:	0e f4       	brtc	.+2      	; 0xb36 <__addsf3x+0x20>
 b34:	e0 95       	com	r30
 b36:	0b 2e       	mov	r0, r27
 b38:	ba 2f       	mov	r27, r26
 b3a:	a0 2d       	mov	r26, r0
 b3c:	0b 01       	movw	r0, r22
 b3e:	b9 01       	movw	r22, r18
 b40:	90 01       	movw	r18, r0
 b42:	0c 01       	movw	r0, r24
 b44:	ca 01       	movw	r24, r20
 b46:	a0 01       	movw	r20, r0
 b48:	11 24       	eor	r1, r1
 b4a:	ff 27       	eor	r31, r31
 b4c:	59 1b       	sub	r21, r25
 b4e:	99 f0       	breq	.+38     	; 0xb76 <__addsf3x+0x60>
 b50:	59 3f       	cpi	r21, 0xF9	; 249
 b52:	50 f4       	brcc	.+20     	; 0xb68 <__addsf3x+0x52>
 b54:	50 3e       	cpi	r21, 0xE0	; 224
 b56:	68 f1       	brcs	.+90     	; 0xbb2 <__addsf3x+0x9c>
 b58:	1a 16       	cp	r1, r26
 b5a:	f0 40       	sbci	r31, 0x00	; 0
 b5c:	a2 2f       	mov	r26, r18
 b5e:	23 2f       	mov	r18, r19
 b60:	34 2f       	mov	r19, r20
 b62:	44 27       	eor	r20, r20
 b64:	58 5f       	subi	r21, 0xF8	; 248
 b66:	f3 cf       	rjmp	.-26     	; 0xb4e <__addsf3x+0x38>
 b68:	46 95       	lsr	r20
 b6a:	37 95       	ror	r19
 b6c:	27 95       	ror	r18
 b6e:	a7 95       	ror	r26
 b70:	f0 40       	sbci	r31, 0x00	; 0
 b72:	53 95       	inc	r21
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__addsf3x+0x52>
 b76:	7e f4       	brtc	.+30     	; 0xb96 <__addsf3x+0x80>
 b78:	1f 16       	cp	r1, r31
 b7a:	ba 0b       	sbc	r27, r26
 b7c:	62 0b       	sbc	r22, r18
 b7e:	73 0b       	sbc	r23, r19
 b80:	84 0b       	sbc	r24, r20
 b82:	ba f0       	brmi	.+46     	; 0xbb2 <__addsf3x+0x9c>
 b84:	91 50       	subi	r25, 0x01	; 1
 b86:	a1 f0       	breq	.+40     	; 0xbb0 <__addsf3x+0x9a>
 b88:	ff 0f       	add	r31, r31
 b8a:	bb 1f       	adc	r27, r27
 b8c:	66 1f       	adc	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	c2 f7       	brpl	.-16     	; 0xb84 <__addsf3x+0x6e>
 b94:	0e c0       	rjmp	.+28     	; 0xbb2 <__addsf3x+0x9c>
 b96:	ba 0f       	add	r27, r26
 b98:	62 1f       	adc	r22, r18
 b9a:	73 1f       	adc	r23, r19
 b9c:	84 1f       	adc	r24, r20
 b9e:	48 f4       	brcc	.+18     	; 0xbb2 <__addsf3x+0x9c>
 ba0:	87 95       	ror	r24
 ba2:	77 95       	ror	r23
 ba4:	67 95       	ror	r22
 ba6:	b7 95       	ror	r27
 ba8:	f7 95       	ror	r31
 baa:	9e 3f       	cpi	r25, 0xFE	; 254
 bac:	08 f0       	brcs	.+2      	; 0xbb0 <__addsf3x+0x9a>
 bae:	b0 cf       	rjmp	.-160    	; 0xb10 <__addsf3+0x28>
 bb0:	93 95       	inc	r25
 bb2:	88 0f       	add	r24, r24
 bb4:	08 f0       	brcs	.+2      	; 0xbb8 <__addsf3x+0xa2>
 bb6:	99 27       	eor	r25, r25
 bb8:	ee 0f       	add	r30, r30
 bba:	97 95       	ror	r25
 bbc:	87 95       	ror	r24
 bbe:	08 95       	ret

00000bc0 <__cmpsf2>:
 bc0:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_cmp>
 bc4:	08 f4       	brcc	.+2      	; 0xbc8 <__cmpsf2+0x8>
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	08 95       	ret

00000bca <__fixunssfsi>:
 bca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_splitA>
 bce:	88 f0       	brcs	.+34     	; 0xbf2 <__fixunssfsi+0x28>
 bd0:	9f 57       	subi	r25, 0x7F	; 127
 bd2:	98 f0       	brcs	.+38     	; 0xbfa <__fixunssfsi+0x30>
 bd4:	b9 2f       	mov	r27, r25
 bd6:	99 27       	eor	r25, r25
 bd8:	b7 51       	subi	r27, 0x17	; 23
 bda:	b0 f0       	brcs	.+44     	; 0xc08 <__fixunssfsi+0x3e>
 bdc:	e1 f0       	breq	.+56     	; 0xc16 <__fixunssfsi+0x4c>
 bde:	66 0f       	add	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	1a f0       	brmi	.+6      	; 0xbee <__fixunssfsi+0x24>
 be8:	ba 95       	dec	r27
 bea:	c9 f7       	brne	.-14     	; 0xbde <__fixunssfsi+0x14>
 bec:	14 c0       	rjmp	.+40     	; 0xc16 <__fixunssfsi+0x4c>
 bee:	b1 30       	cpi	r27, 0x01	; 1
 bf0:	91 f0       	breq	.+36     	; 0xc16 <__fixunssfsi+0x4c>
 bf2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_zero>
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	08 95       	ret
 bfa:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
 bfe:	67 2f       	mov	r22, r23
 c00:	78 2f       	mov	r23, r24
 c02:	88 27       	eor	r24, r24
 c04:	b8 5f       	subi	r27, 0xF8	; 248
 c06:	39 f0       	breq	.+14     	; 0xc16 <__fixunssfsi+0x4c>
 c08:	b9 3f       	cpi	r27, 0xF9	; 249
 c0a:	cc f3       	brlt	.-14     	; 0xbfe <__fixunssfsi+0x34>
 c0c:	86 95       	lsr	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	b3 95       	inc	r27
 c14:	d9 f7       	brne	.-10     	; 0xc0c <__fixunssfsi+0x42>
 c16:	3e f4       	brtc	.+14     	; 0xc26 <__fixunssfsi+0x5c>
 c18:	90 95       	com	r25
 c1a:	80 95       	com	r24
 c1c:	70 95       	com	r23
 c1e:	61 95       	neg	r22
 c20:	7f 4f       	sbci	r23, 0xFF	; 255
 c22:	8f 4f       	sbci	r24, 0xFF	; 255
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	08 95       	ret

00000c28 <__floatunsisf>:
 c28:	e8 94       	clt
 c2a:	09 c0       	rjmp	.+18     	; 0xc3e <__floatsisf+0x12>

00000c2c <__floatsisf>:
 c2c:	97 fb       	bst	r25, 7
 c2e:	3e f4       	brtc	.+14     	; 0xc3e <__floatsisf+0x12>
 c30:	90 95       	com	r25
 c32:	80 95       	com	r24
 c34:	70 95       	com	r23
 c36:	61 95       	neg	r22
 c38:	7f 4f       	sbci	r23, 0xFF	; 255
 c3a:	8f 4f       	sbci	r24, 0xFF	; 255
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	99 23       	and	r25, r25
 c40:	a9 f0       	breq	.+42     	; 0xc6c <__floatsisf+0x40>
 c42:	f9 2f       	mov	r31, r25
 c44:	96 e9       	ldi	r25, 0x96	; 150
 c46:	bb 27       	eor	r27, r27
 c48:	93 95       	inc	r25
 c4a:	f6 95       	lsr	r31
 c4c:	87 95       	ror	r24
 c4e:	77 95       	ror	r23
 c50:	67 95       	ror	r22
 c52:	b7 95       	ror	r27
 c54:	f1 11       	cpse	r31, r1
 c56:	f8 cf       	rjmp	.-16     	; 0xc48 <__floatsisf+0x1c>
 c58:	fa f4       	brpl	.+62     	; 0xc98 <__floatsisf+0x6c>
 c5a:	bb 0f       	add	r27, r27
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__floatsisf+0x36>
 c5e:	60 ff       	sbrs	r22, 0
 c60:	1b c0       	rjmp	.+54     	; 0xc98 <__floatsisf+0x6c>
 c62:	6f 5f       	subi	r22, 0xFF	; 255
 c64:	7f 4f       	sbci	r23, 0xFF	; 255
 c66:	8f 4f       	sbci	r24, 0xFF	; 255
 c68:	9f 4f       	sbci	r25, 0xFF	; 255
 c6a:	16 c0       	rjmp	.+44     	; 0xc98 <__floatsisf+0x6c>
 c6c:	88 23       	and	r24, r24
 c6e:	11 f0       	breq	.+4      	; 0xc74 <__floatsisf+0x48>
 c70:	96 e9       	ldi	r25, 0x96	; 150
 c72:	11 c0       	rjmp	.+34     	; 0xc96 <__floatsisf+0x6a>
 c74:	77 23       	and	r23, r23
 c76:	21 f0       	breq	.+8      	; 0xc80 <__floatsisf+0x54>
 c78:	9e e8       	ldi	r25, 0x8E	; 142
 c7a:	87 2f       	mov	r24, r23
 c7c:	76 2f       	mov	r23, r22
 c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__floatsisf+0x5e>
 c80:	66 23       	and	r22, r22
 c82:	71 f0       	breq	.+28     	; 0xca0 <__floatsisf+0x74>
 c84:	96 e8       	ldi	r25, 0x86	; 134
 c86:	86 2f       	mov	r24, r22
 c88:	70 e0       	ldi	r23, 0x00	; 0
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	2a f0       	brmi	.+10     	; 0xc98 <__floatsisf+0x6c>
 c8e:	9a 95       	dec	r25
 c90:	66 0f       	add	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	da f7       	brpl	.-10     	; 0xc8e <__floatsisf+0x62>
 c98:	88 0f       	add	r24, r24
 c9a:	96 95       	lsr	r25
 c9c:	87 95       	ror	r24
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__fp_cmp>:
 ca2:	99 0f       	add	r25, r25
 ca4:	00 08       	sbc	r0, r0
 ca6:	55 0f       	add	r21, r21
 ca8:	aa 0b       	sbc	r26, r26
 caa:	e0 e8       	ldi	r30, 0x80	; 128
 cac:	fe ef       	ldi	r31, 0xFE	; 254
 cae:	16 16       	cp	r1, r22
 cb0:	17 06       	cpc	r1, r23
 cb2:	e8 07       	cpc	r30, r24
 cb4:	f9 07       	cpc	r31, r25
 cb6:	c0 f0       	brcs	.+48     	; 0xce8 <__fp_cmp+0x46>
 cb8:	12 16       	cp	r1, r18
 cba:	13 06       	cpc	r1, r19
 cbc:	e4 07       	cpc	r30, r20
 cbe:	f5 07       	cpc	r31, r21
 cc0:	98 f0       	brcs	.+38     	; 0xce8 <__fp_cmp+0x46>
 cc2:	62 1b       	sub	r22, r18
 cc4:	73 0b       	sbc	r23, r19
 cc6:	84 0b       	sbc	r24, r20
 cc8:	95 0b       	sbc	r25, r21
 cca:	39 f4       	brne	.+14     	; 0xcda <__fp_cmp+0x38>
 ccc:	0a 26       	eor	r0, r26
 cce:	61 f0       	breq	.+24     	; 0xce8 <__fp_cmp+0x46>
 cd0:	23 2b       	or	r18, r19
 cd2:	24 2b       	or	r18, r20
 cd4:	25 2b       	or	r18, r21
 cd6:	21 f4       	brne	.+8      	; 0xce0 <__fp_cmp+0x3e>
 cd8:	08 95       	ret
 cda:	0a 26       	eor	r0, r26
 cdc:	09 f4       	brne	.+2      	; 0xce0 <__fp_cmp+0x3e>
 cde:	a1 40       	sbci	r26, 0x01	; 1
 ce0:	a6 95       	lsr	r26
 ce2:	8f ef       	ldi	r24, 0xFF	; 255
 ce4:	81 1d       	adc	r24, r1
 ce6:	81 1d       	adc	r24, r1
 ce8:	08 95       	ret

00000cea <__fp_inf>:
 cea:	97 f9       	bld	r25, 7
 cec:	9f 67       	ori	r25, 0x7F	; 127
 cee:	80 e8       	ldi	r24, 0x80	; 128
 cf0:	70 e0       	ldi	r23, 0x00	; 0
 cf2:	60 e0       	ldi	r22, 0x00	; 0
 cf4:	08 95       	ret

00000cf6 <__fp_nan>:
 cf6:	9f ef       	ldi	r25, 0xFF	; 255
 cf8:	80 ec       	ldi	r24, 0xC0	; 192
 cfa:	08 95       	ret

00000cfc <__fp_pscA>:
 cfc:	00 24       	eor	r0, r0
 cfe:	0a 94       	dec	r0
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	18 06       	cpc	r1, r24
 d06:	09 06       	cpc	r0, r25
 d08:	08 95       	ret

00000d0a <__fp_pscB>:
 d0a:	00 24       	eor	r0, r0
 d0c:	0a 94       	dec	r0
 d0e:	12 16       	cp	r1, r18
 d10:	13 06       	cpc	r1, r19
 d12:	14 06       	cpc	r1, r20
 d14:	05 06       	cpc	r0, r21
 d16:	08 95       	ret

00000d18 <__fp_round>:
 d18:	09 2e       	mov	r0, r25
 d1a:	03 94       	inc	r0
 d1c:	00 0c       	add	r0, r0
 d1e:	11 f4       	brne	.+4      	; 0xd24 <__fp_round+0xc>
 d20:	88 23       	and	r24, r24
 d22:	52 f0       	brmi	.+20     	; 0xd38 <__fp_round+0x20>
 d24:	bb 0f       	add	r27, r27
 d26:	40 f4       	brcc	.+16     	; 0xd38 <__fp_round+0x20>
 d28:	bf 2b       	or	r27, r31
 d2a:	11 f4       	brne	.+4      	; 0xd30 <__fp_round+0x18>
 d2c:	60 ff       	sbrs	r22, 0
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__fp_round+0x20>
 d30:	6f 5f       	subi	r22, 0xFF	; 255
 d32:	7f 4f       	sbci	r23, 0xFF	; 255
 d34:	8f 4f       	sbci	r24, 0xFF	; 255
 d36:	9f 4f       	sbci	r25, 0xFF	; 255
 d38:	08 95       	ret

00000d3a <__fp_split3>:
 d3a:	57 fd       	sbrc	r21, 7
 d3c:	90 58       	subi	r25, 0x80	; 128
 d3e:	44 0f       	add	r20, r20
 d40:	55 1f       	adc	r21, r21
 d42:	59 f0       	breq	.+22     	; 0xd5a <__fp_splitA+0x10>
 d44:	5f 3f       	cpi	r21, 0xFF	; 255
 d46:	71 f0       	breq	.+28     	; 0xd64 <__fp_splitA+0x1a>
 d48:	47 95       	ror	r20

00000d4a <__fp_splitA>:
 d4a:	88 0f       	add	r24, r24
 d4c:	97 fb       	bst	r25, 7
 d4e:	99 1f       	adc	r25, r25
 d50:	61 f0       	breq	.+24     	; 0xd6a <__fp_splitA+0x20>
 d52:	9f 3f       	cpi	r25, 0xFF	; 255
 d54:	79 f0       	breq	.+30     	; 0xd74 <__fp_splitA+0x2a>
 d56:	87 95       	ror	r24
 d58:	08 95       	ret
 d5a:	12 16       	cp	r1, r18
 d5c:	13 06       	cpc	r1, r19
 d5e:	14 06       	cpc	r1, r20
 d60:	55 1f       	adc	r21, r21
 d62:	f2 cf       	rjmp	.-28     	; 0xd48 <__fp_split3+0xe>
 d64:	46 95       	lsr	r20
 d66:	f1 df       	rcall	.-30     	; 0xd4a <__fp_splitA>
 d68:	08 c0       	rjmp	.+16     	; 0xd7a <__fp_splitA+0x30>
 d6a:	16 16       	cp	r1, r22
 d6c:	17 06       	cpc	r1, r23
 d6e:	18 06       	cpc	r1, r24
 d70:	99 1f       	adc	r25, r25
 d72:	f1 cf       	rjmp	.-30     	; 0xd56 <__fp_splitA+0xc>
 d74:	86 95       	lsr	r24
 d76:	71 05       	cpc	r23, r1
 d78:	61 05       	cpc	r22, r1
 d7a:	08 94       	sec
 d7c:	08 95       	ret

00000d7e <__fp_zero>:
 d7e:	e8 94       	clt

00000d80 <__fp_szero>:
 d80:	bb 27       	eor	r27, r27
 d82:	66 27       	eor	r22, r22
 d84:	77 27       	eor	r23, r23
 d86:	cb 01       	movw	r24, r22
 d88:	97 f9       	bld	r25, 7
 d8a:	08 95       	ret

00000d8c <__gesf2>:
 d8c:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_cmp>
 d90:	08 f4       	brcc	.+2      	; 0xd94 <__gesf2+0x8>
 d92:	8f ef       	ldi	r24, 0xFF	; 255
 d94:	08 95       	ret

00000d96 <__mulsf3>:
 d96:	0e 94 de 06 	call	0xdbc	; 0xdbc <__mulsf3x>
 d9a:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
 d9e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
 da2:	38 f0       	brcs	.+14     	; 0xdb2 <__mulsf3+0x1c>
 da4:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
 da8:	20 f0       	brcs	.+8      	; 0xdb2 <__mulsf3+0x1c>
 daa:	95 23       	and	r25, r21
 dac:	11 f0       	breq	.+4      	; 0xdb2 <__mulsf3+0x1c>
 dae:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
 db2:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
 db6:	11 24       	eor	r1, r1
 db8:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>

00000dbc <__mulsf3x>:
 dbc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
 dc0:	70 f3       	brcs	.-36     	; 0xd9e <__mulsf3+0x8>

00000dc2 <__mulsf3_pse>:
 dc2:	95 9f       	mul	r25, r21
 dc4:	c1 f3       	breq	.-16     	; 0xdb6 <__mulsf3+0x20>
 dc6:	95 0f       	add	r25, r21
 dc8:	50 e0       	ldi	r21, 0x00	; 0
 dca:	55 1f       	adc	r21, r21
 dcc:	62 9f       	mul	r22, r18
 dce:	f0 01       	movw	r30, r0
 dd0:	72 9f       	mul	r23, r18
 dd2:	bb 27       	eor	r27, r27
 dd4:	f0 0d       	add	r31, r0
 dd6:	b1 1d       	adc	r27, r1
 dd8:	63 9f       	mul	r22, r19
 dda:	aa 27       	eor	r26, r26
 ddc:	f0 0d       	add	r31, r0
 dde:	b1 1d       	adc	r27, r1
 de0:	aa 1f       	adc	r26, r26
 de2:	64 9f       	mul	r22, r20
 de4:	66 27       	eor	r22, r22
 de6:	b0 0d       	add	r27, r0
 de8:	a1 1d       	adc	r26, r1
 dea:	66 1f       	adc	r22, r22
 dec:	82 9f       	mul	r24, r18
 dee:	22 27       	eor	r18, r18
 df0:	b0 0d       	add	r27, r0
 df2:	a1 1d       	adc	r26, r1
 df4:	62 1f       	adc	r22, r18
 df6:	73 9f       	mul	r23, r19
 df8:	b0 0d       	add	r27, r0
 dfa:	a1 1d       	adc	r26, r1
 dfc:	62 1f       	adc	r22, r18
 dfe:	83 9f       	mul	r24, r19
 e00:	a0 0d       	add	r26, r0
 e02:	61 1d       	adc	r22, r1
 e04:	22 1f       	adc	r18, r18
 e06:	74 9f       	mul	r23, r20
 e08:	33 27       	eor	r19, r19
 e0a:	a0 0d       	add	r26, r0
 e0c:	61 1d       	adc	r22, r1
 e0e:	23 1f       	adc	r18, r19
 e10:	84 9f       	mul	r24, r20
 e12:	60 0d       	add	r22, r0
 e14:	21 1d       	adc	r18, r1
 e16:	82 2f       	mov	r24, r18
 e18:	76 2f       	mov	r23, r22
 e1a:	6a 2f       	mov	r22, r26
 e1c:	11 24       	eor	r1, r1
 e1e:	9f 57       	subi	r25, 0x7F	; 127
 e20:	50 40       	sbci	r21, 0x00	; 0
 e22:	9a f0       	brmi	.+38     	; 0xe4a <__mulsf3_pse+0x88>
 e24:	f1 f0       	breq	.+60     	; 0xe62 <__mulsf3_pse+0xa0>
 e26:	88 23       	and	r24, r24
 e28:	4a f0       	brmi	.+18     	; 0xe3c <__mulsf3_pse+0x7a>
 e2a:	ee 0f       	add	r30, r30
 e2c:	ff 1f       	adc	r31, r31
 e2e:	bb 1f       	adc	r27, r27
 e30:	66 1f       	adc	r22, r22
 e32:	77 1f       	adc	r23, r23
 e34:	88 1f       	adc	r24, r24
 e36:	91 50       	subi	r25, 0x01	; 1
 e38:	50 40       	sbci	r21, 0x00	; 0
 e3a:	a9 f7       	brne	.-22     	; 0xe26 <__mulsf3_pse+0x64>
 e3c:	9e 3f       	cpi	r25, 0xFE	; 254
 e3e:	51 05       	cpc	r21, r1
 e40:	80 f0       	brcs	.+32     	; 0xe62 <__mulsf3_pse+0xa0>
 e42:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
 e46:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
 e4a:	5f 3f       	cpi	r21, 0xFF	; 255
 e4c:	e4 f3       	brlt	.-8      	; 0xe46 <__mulsf3_pse+0x84>
 e4e:	98 3e       	cpi	r25, 0xE8	; 232
 e50:	d4 f3       	brlt	.-12     	; 0xe46 <__mulsf3_pse+0x84>
 e52:	86 95       	lsr	r24
 e54:	77 95       	ror	r23
 e56:	67 95       	ror	r22
 e58:	b7 95       	ror	r27
 e5a:	f7 95       	ror	r31
 e5c:	e7 95       	ror	r30
 e5e:	9f 5f       	subi	r25, 0xFF	; 255
 e60:	c1 f7       	brne	.-16     	; 0xe52 <__mulsf3_pse+0x90>
 e62:	fe 2b       	or	r31, r30
 e64:	88 0f       	add	r24, r24
 e66:	91 1d       	adc	r25, r1
 e68:	96 95       	lsr	r25
 e6a:	87 95       	ror	r24
 e6c:	97 f9       	bld	r25, 7
 e6e:	08 95       	ret

00000e70 <__udivmodhi4>:
 e70:	aa 1b       	sub	r26, r26
 e72:	bb 1b       	sub	r27, r27
 e74:	51 e1       	ldi	r21, 0x11	; 17
 e76:	07 c0       	rjmp	.+14     	; 0xe86 <__udivmodhi4_ep>

00000e78 <__udivmodhi4_loop>:
 e78:	aa 1f       	adc	r26, r26
 e7a:	bb 1f       	adc	r27, r27
 e7c:	a6 17       	cp	r26, r22
 e7e:	b7 07       	cpc	r27, r23
 e80:	10 f0       	brcs	.+4      	; 0xe86 <__udivmodhi4_ep>
 e82:	a6 1b       	sub	r26, r22
 e84:	b7 0b       	sbc	r27, r23

00000e86 <__udivmodhi4_ep>:
 e86:	88 1f       	adc	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	5a 95       	dec	r21
 e8c:	a9 f7       	brne	.-22     	; 0xe78 <__udivmodhi4_loop>
 e8e:	80 95       	com	r24
 e90:	90 95       	com	r25
 e92:	bc 01       	movw	r22, r24
 e94:	cd 01       	movw	r24, r26
 e96:	08 95       	ret

00000e98 <__divmodhi4>:
 e98:	97 fb       	bst	r25, 7
 e9a:	07 2e       	mov	r0, r23
 e9c:	16 f4       	brtc	.+4      	; 0xea2 <__divmodhi4+0xa>
 e9e:	00 94       	com	r0
 ea0:	07 d0       	rcall	.+14     	; 0xeb0 <__divmodhi4_neg1>
 ea2:	77 fd       	sbrc	r23, 7
 ea4:	09 d0       	rcall	.+18     	; 0xeb8 <__divmodhi4_neg2>
 ea6:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
 eaa:	07 fc       	sbrc	r0, 7
 eac:	05 d0       	rcall	.+10     	; 0xeb8 <__divmodhi4_neg2>
 eae:	3e f4       	brtc	.+14     	; 0xebe <__divmodhi4_exit>

00000eb0 <__divmodhi4_neg1>:
 eb0:	90 95       	com	r25
 eb2:	81 95       	neg	r24
 eb4:	9f 4f       	sbci	r25, 0xFF	; 255
 eb6:	08 95       	ret

00000eb8 <__divmodhi4_neg2>:
 eb8:	70 95       	com	r23
 eba:	61 95       	neg	r22
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ebe <__divmodhi4_exit>:
 ebe:	08 95       	ret

00000ec0 <_exit>:
 ec0:	f8 94       	cli

00000ec2 <__stop_program>:
 ec2:	ff cf       	rjmp	.-2      	; 0xec2 <__stop_program>
